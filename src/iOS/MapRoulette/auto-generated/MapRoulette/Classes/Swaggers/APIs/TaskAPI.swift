//
// TaskAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TaskAPI {
    /**
     Create a batch of Tasks

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPost(body: [OrgMaprouletteModelsTask], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPostWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a batch of Tasks
     - POST /tasks

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPostWithRequestBuilder(body: [OrgMaprouletteModelsTask], apiKey: String) -> RequestBuilder<Void> {
        let path = "/tasks"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update a batch of Tasks

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPut(body: [OrgMaprouletteModelsTask], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPutWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a batch of Tasks
     - PUT /tasks

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPutWithRequestBuilder(body: [OrgMaprouletteModelsTask], apiKey: String) -> RequestBuilder<Void> {
        let path = "/tasks"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create a Task

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: OrgMaprouletteModelsTask, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Task
     - POST /task

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter body: (body) The JSON structure for the Task body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func createWithRequestBuilder(body: OrgMaprouletteModelsTask, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsTask> {
        let path = "/task"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deletes an existing Task

     - parameter _id: (path) The id of the Task being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, apiKey: String, immediate: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, apiKey: apiKey, immediate: immediate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an existing Task
     - DELETE /task/{id}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the Task being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query)  (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, apiKey: String, immediate: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/task/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete Task Tags

     - parameter _id: (path) The ID of the Task 
     - parameter tags: (query) A comma separated list of tags 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTagsFromItem(_id: Int64, tags: String, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTagsFromItemWithRequestBuilder(_id: _id, tags: tags, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Task Tags
     - DELETE /task/{id}/tags

     - parameter _id: (path) The ID of the Task 
     - parameter tags: (query) A comma separated list of tags 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTagsFromItemWithRequestBuilder(_id: Int64, tags: String, apiKey: String) -> RequestBuilder<Void> {
        var path = "/task/{id}/tags"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "tags": tags
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Find Task matching search criteria

     - parameter q: (query) The search string used to match the Task names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This limits the search to the provided challenge and no tasks outside of the provided challenge ID. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only want to see Tasks from enabled Challenges returned. Default value is true. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        findWithRequestBuilder(q: q, parentId: parentId, limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find Task matching search criteria
     - GET /tasks/find

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter q: (query) The search string used to match the Task names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This limits the search to the provided challenge and no tasks outside of the provided challenge ID. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only want to see Tasks from enabled Challenges returned. Default value is true. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func findWithRequestBuilder(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/find"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "parentId": parentId?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve Tasks based on provided tags

     - parameter tags: (query) A comma separated list of tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsBasedOnTags(tags: String? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getItemsBasedOnTagsWithRequestBuilder(tags: tags, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve Tasks based on provided tags
     - GET /tasks/tags

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter tags: (query) A comma separated list of tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getItemsBasedOnTagsWithRequestBuilder(tags: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/tags"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves random Task

     - parameter ps: (query) The search string to match the names of projects to limit the Task pool from. The string is case insensitive. (optional)
     - parameter cs: (query) The search string to match the names of challenges to limit the Task pool from. The string is case insensitive. (optional)
     - parameter ct: (query) The challenge tags to limit the parent challenges that will limit the Task pool. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter ts: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTasks(ps: String? = nil, cs: String? = nil, ct: String? = nil, tags: String? = nil, ts: String? = nil, limit: Int? = nil, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTasksWithRequestBuilder(ps: ps, cs: cs, ct: ct, tags: tags, ts: ts, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves random Task
     - GET /tasks/random

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter ps: (query) The search string to match the names of projects to limit the Task pool from. The string is case insensitive. (optional)
     - parameter cs: (query) The search string to match the names of challenges to limit the Task pool from. The string is case insensitive. (optional)
     - parameter ct: (query) The challenge tags to limit the parent challenges that will limit the Task pool. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter ts: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTasksWithRequestBuilder(ps: String? = nil, cs: String? = nil, ct: String? = nil, tags: String? = nil, ts: String? = nil, limit: Int? = nil, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/random"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ps": ps, 
                        "cs": cs, 
                        "ct": ct, 
                        "tags": tags, 
                        "ts": ts, 
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve tags for Task

     - parameter _id: (path) The ID of the Task 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsForTask(_id: Int64, completion: @escaping ((_ data: [OrgMaprouletteModelsTag]?,_ error: Error?) -> Void)) {
        getTagsForTaskWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve tags for Task
     - GET /task/{id}/tags

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
}, {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
} ]}]
     - parameter _id: (path) The ID of the Task 

     - returns: RequestBuilder<[OrgMaprouletteModelsTag]> 
     */
    open class func getTagsForTaskWithRequestBuilder(_id: Int64) -> RequestBuilder<[OrgMaprouletteModelsTag]> {
        var path = "/task/{id}/tags"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTag]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves a history for the task

     - parameter _id: (path) The id of the task 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskHistoryLog(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        getTaskHistoryLogWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves a history for the task
     - GET /task/{id}/history

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the task 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func getTaskHistoryLogWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/history"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Tasks within a bounding box

     - parameter _left: (path) The minimum latitude for the bounding box. 
     - parameter bottom: (path) The minimum longitude for the bounding box. 
     - parameter _right: (path) The maximum latitude for the bounding box. 
     - parameter top: (path) The maximum longitude for the bounding box. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter excludeLocked: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter includeTotal: (query)  (optional)
     - parameter includeGeometries: (query) Optional flag to have geometries data returned for each task. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTasksInBoundingBox(_left: Double, bottom: Double, _right: Double, top: Double, limit: Int? = nil, page: Int? = nil, excludeLocked: Bool? = nil, sort: String? = nil, order: String? = nil, includeTotal: Bool? = nil, includeGeometries: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsClusteredPoint]?,_ error: Error?) -> Void)) {
        getTasksInBoundingBoxWithRequestBuilder(_left: _left, bottom: bottom, _right: _right, top: top, limit: limit, page: page, excludeLocked: excludeLocked, sort: sort, order: order, includeTotal: includeTotal, includeGeometries: includeGeometries).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Tasks within a bounding box
     - GET /tasks/box/{left}/{bottom}/{right}/{top}

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}, {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
} ]}]
     - parameter _left: (path) The minimum latitude for the bounding box. 
     - parameter bottom: (path) The minimum longitude for the bounding box. 
     - parameter _right: (path) The maximum latitude for the bounding box. 
     - parameter top: (path) The maximum longitude for the bounding box. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter excludeLocked: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter includeTotal: (query)  (optional)
     - parameter includeGeometries: (query) Optional flag to have geometries data returned for each task. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> 
     */
    open class func getTasksInBoundingBoxWithRequestBuilder(_left: Double, bottom: Double, _right: Double, top: Double, limit: Int? = nil, page: Int? = nil, excludeLocked: Bool? = nil, sort: String? = nil, order: String? = nil, includeTotal: Bool? = nil, includeGeometries: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> {
        var path = "/tasks/box/{left}/{bottom}/{right}/{top}"
        let _leftPreEscape = "\(_left)"
        let _leftPostEscape = _leftPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{left}", with: _leftPostEscape, options: .literal, range: nil)
        let bottomPreEscape = "\(bottom)"
        let bottomPostEscape = bottomPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bottom}", with: bottomPostEscape, options: .literal, range: nil)
        let _rightPreEscape = "\(_right)"
        let _rightPostEscape = _rightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{right}", with: _rightPostEscape, options: .literal, range: nil)
        let topPreEscape = "\(top)"
        let topPostEscape = topPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{top}", with: topPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "excludeLocked": excludeLocked, 
                        "sort": sort, 
                        "order": order, 
                        "includeTotal": includeTotal, 
                        "includeGeometries": includeGeometries
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Task Changeset

     - parameter _id: (path) The ID of the task 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func matchToOSMChangeSet(_id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        matchToOSMChangeSetWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Task Changeset
     - PUT /task/{id}/changeset

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The ID of the task 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func matchToOSMChangeSetWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/changeset"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves an already existing Task

     - parameter _id: (path) The id of the Task to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Task
     - GET /task/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the Task to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Task

     - parameter _id: (path) The id of the parent Challenge of the Task 
     - parameter name: (path) The name of the Task being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readByName(_id: Int64, name: String, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        readByNameWithRequestBuilder(_id: _id, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Task
     - GET /challenge/{id}/task/{name}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the parent Challenge of the Task 
     - parameter name: (path) The name of the Task being retrieved 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func readByNameWithRequestBuilder(_id: Int64, name: String) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/challenge/{id}/task/{name}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Refresh an existing lock on a Task

     - parameter _id: (path) The id of the Task on which the lock is to be refreshed 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshTaskLock(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        refreshTaskLockWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Refresh an existing lock on a Task
     - GET /task/{id}/refreshLock

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the Task on which the lock is to be refreshed 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func refreshTaskLockWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/refreshLock"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Release a Task (unlocks it)

     - parameter _id: (path) The id of the Task to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func releaseTask(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        releaseTaskWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Release a Task (unlocks it)
     - GET /task/{id}/release

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the Task to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func releaseTaskWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/release"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Task Review Status for a Bundle

     - parameter _id: (path) The ID of the bundle 
     - parameter status: (path) The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the review status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setBundleTaskReviewStatus(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setBundleTaskReviewStatusWithRequestBuilder(_id: _id, status: status, apiKey: apiKey, comment: comment, tags: tags).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Task Review Status for a Bundle
     - PUT /taskBundle/{id}/review/{status}

     - parameter _id: (path) The ID of the bundle 
     - parameter status: (path) The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the review status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setBundleTaskReviewStatusWithRequestBuilder(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil) -> RequestBuilder<Void> {
        var path = "/taskBundle/{id}/review/{status}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "comment": comment, 
                        "tags": tags
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update Bundle Task Status

     - parameter bundleId: (path) The ID of the bundle 
     - parameter primaryId: (path) The primary ID of the task for this bundle 
     - parameter status: (path) The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter requestReview: (query) Boolean indicating if a review is requested on this task. (Will override user settings if provided) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setBundleTaskStatus(bundleId: Int64, primaryId: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, requestReview: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setBundleTaskStatusWithRequestBuilder(bundleId: bundleId, primaryId: primaryId, status: status, apiKey: apiKey, comment: comment, tags: tags, requestReview: requestReview).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Bundle Task Status
     - PUT /taskBundle/{bundleId}/{status}

     - parameter bundleId: (path) The ID of the bundle 
     - parameter primaryId: (path) The primary ID of the task for this bundle 
     - parameter status: (path) The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter requestReview: (query) Boolean indicating if a review is requested on this task. (Will override user settings if provided) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setBundleTaskStatusWithRequestBuilder(bundleId: Int64, primaryId: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, requestReview: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/taskBundle/{bundleId}/{status}"
        let bundleIdPreEscape = "\(bundleId)"
        let bundleIdPostEscape = bundleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bundleId}", with: bundleIdPostEscape, options: .literal, range: nil)
        let primaryIdPreEscape = "\(primaryId)"
        let primaryIdPostEscape = primaryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{primaryId}", with: primaryIdPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "comment": comment, 
                        "tags": tags, 
                        "requestReview": requestReview
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update Task Review Status

     - parameter _id: (path) The ID of the task 
     - parameter status: (path) The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the review status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setTaskReviewStatus(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setTaskReviewStatusWithRequestBuilder(_id: _id, status: status, apiKey: apiKey, comment: comment, tags: tags).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Task Review Status
     - PUT /task/{id}/review/{status}

     - parameter _id: (path) The ID of the task 
     - parameter status: (path) The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the review status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setTaskReviewStatusWithRequestBuilder(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil) -> RequestBuilder<Void> {
        var path = "/task/{id}/review/{status}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "comment": comment, 
                        "tags": tags
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update Task Status

     - parameter _id: (path) The ID of the task 
     - parameter status: (path) The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter requestReview: (query) Boolean indicating if a review is requested on this task. (Will override user settings if provided) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setTaskStatus(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, requestReview: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setTaskStatusWithRequestBuilder(_id: _id, status: status, apiKey: apiKey, comment: comment, tags: tags, requestReview: requestReview).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update Task Status
     - PUT /task/{id}/{status}

     - parameter _id: (path) The ID of the task 
     - parameter status: (path) The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter comment: (query) Any comment that is provided by the user when setting the status (optional)
     - parameter tags: (query) Optional tags to associate with this task (optional)
     - parameter requestReview: (query) Boolean indicating if a review is requested on this task. (Will override user settings if provided) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setTaskStatusWithRequestBuilder(_id: Int64, status: Int, apiKey: String, comment: String? = nil, tags: String? = nil, requestReview: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/task/{id}/{status}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(status)"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "comment": comment, 
                        "tags": tags, 
                        "requestReview": requestReview
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Start working on a Task (locks it for the user)

     - parameter _id: (path) The id of the Task to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startOnTask(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        startOnTaskWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Start working on a Task (locks it for the user)
     - GET /task/{id}/start

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the Task to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func startOnTaskWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/start"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates a Task

     - parameter body: (body) The JSON structure for the Task body. 
     - parameter _id: (path) The ID of the Task that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: OrgMaprouletteModelsTask, _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a Task
     - PUT /task/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter body: (body) The JSON structure for the Task body. 
     - parameter _id: (path) The ID of the Task that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func updateWithRequestBuilder(body: OrgMaprouletteModelsTask, _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Updates Task Tags

     - parameter _id: (path) The ID of the Task 
     - parameter tags: (query) A complete comma separated list of tags. If empty, then all tags will be removed. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateItemTags(_id: Int64, tags: String, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateItemTagsWithRequestBuilder(_id: _id, tags: tags, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates Task Tags
     - GET /task/{id}/tags/update

     - parameter _id: (path) The ID of the Task 
     - parameter tags: (query) A complete comma separated list of tags. If empty, then all tags will be removed. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func updateItemTagsWithRequestBuilder(_id: Int64, tags: String, apiKey: String) -> RequestBuilder<Void> {
        var path = "/task/{id}/tags/update"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "tags": tags
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
