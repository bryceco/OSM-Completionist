//
// VirtualChallengeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class VirtualChallengeAPI {
    /**
     Create a Virtual Challenge

     - parameter body: (body) The JSON structure for the Virtual Challenge body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: OrgMaprouletteModelsVirtualChallenge, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsVirtualChallenge?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Virtual Challenge
     - POST /virtualchallenge

     - examples: [{contentType=application/json, example={
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
}}]
     - parameter body: (body) The JSON structure for the Virtual Challenge body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsVirtualChallenge> 
     */
    open class func createWithRequestBuilder(body: OrgMaprouletteModelsVirtualChallenge, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsVirtualChallenge> {
        let path = "/virtualchallenge"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsVirtualChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deletes an existing Virtual Challenge

     - parameter _id: (path) The id of the Virtual Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, apiKey: String, immediate: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, apiKey: apiKey, immediate: immediate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an existing Virtual Challenge
     - DELETE /virtualchallenge/{id}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the Virtual Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, apiKey: String, immediate: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/virtualchallenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves clustered Task points

     - parameter _id: (path) The id of the parent project. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClusteredPoints(_id: Int64, filter: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsClusteredPoint]?,_ error: Error?) -> Void)) {
        getClusteredPointsWithRequestBuilder(_id: _id, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves clustered Task points
     - GET /virtualchallenge/clustered/{id}

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}, {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
} ]}]
     - parameter _id: (path) The id of the parent project. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> 
     */
    open class func getClusteredPointsWithRequestBuilder(_id: Int64, filter: String? = nil) -> RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> {
        var path = "/virtualchallenge/clustered/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter": filter
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves nearby Tasks in Virtual Challenge

     - parameter _id: (path)  
     - parameter proximityId: (path)  
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 5. (optional)
     - parameter proximity: (query) Id of task around which geographically closest tasks are desired (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNearbyTasks(_id: Int64, proximityId: Int64, limit: Int? = nil, proximity: Object? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getNearbyTasksWithRequestBuilder(_id: _id, proximityId: proximityId, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves nearby Tasks in Virtual Challenge
     - GET /virtualchallenge/{id}/tasksNearby/{proximityId}

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter _id: (path)  
     - parameter proximityId: (path)  
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 5. (optional)
     - parameter proximity: (query) Id of task around which geographically closest tasks are desired (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getNearbyTasksWithRequestBuilder(_id: Int64, proximityId: Int64, limit: Int? = nil, proximity: Object? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/virtualchallenge/{id}/tasksNearby/{proximityId}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let proximityIdPreEscape = "\(proximityId)"
        let proximityIdPostEscape = proximityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{proximityId}", with: proximityIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves random Task

     - parameter cid: (path) The id of the Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge. 
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTask(cid: Int64, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTaskWithRequestBuilder(cid: cid, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves random Task
     - GET /virtualchallenge/{cid}/task

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter cid: (path) The id of the Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge. 
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTaskWithRequestBuilder(cid: Int64, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/virtualchallenge/{cid}/task"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves next Task

     - parameter cid: (path) The id of the parent Virtual Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSequentialNextTask(cid: Int64, _id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        getSequentialNextTaskWithRequestBuilder(cid: cid, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves next Task
     - GET /virtualchallenge/{cid}/nextTask/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter cid: (path) The id of the parent Virtual Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func getSequentialNextTaskWithRequestBuilder(cid: Int64, _id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/virtualchallenge/{cid}/nextTask/{id}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves previous Task

     - parameter cid: (path) The id of the parent Virtual Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSequentialPreviousTask(cid: Int64, _id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        getSequentialPreviousTaskWithRequestBuilder(cid: cid, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves previous Task
     - GET /virtualchallenge/{cid}/previousTask/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter cid: (path) The id of the parent Virtual Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func getSequentialPreviousTaskWithRequestBuilder(cid: Int64, _id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/virtualchallenge/{cid}/previousTask/{id}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Virtual Challenge GeoJSON

     - parameter _id: (path) The id of the parent Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVirtualChallengeGeoJSON(_id: Int64, filter: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getVirtualChallengeGeoJSONWithRequestBuilder(_id: _id, filter: filter).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieves Virtual Challenge GeoJSON
     - GET /virtualchallenge/view/{id}

     - parameter _id: (path) The id of the parent Virtual Challenge limiting the tasks to only a descendent of that Virtual Challenge. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getVirtualChallengeGeoJSONWithRequestBuilder(_id: Int64, filter: String? = nil) -> RequestBuilder<Void> {
        var path = "/virtualchallenge/view/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter": filter
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the Virtual Challenge.

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsVirtualChallenge]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the Virtual Challenge.
     - GET /virtualchallenges

     - examples: [{contentType=application/json, example=[ {
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
}, {
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query)  (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsVirtualChallenge]> 
     */
    open class func listWithRequestBuilder(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsVirtualChallenge]> {
        let path = "/virtualchallenges"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsVirtualChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the Virtual Challenges Tasks.

     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listTasks(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        listTasksWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the Virtual Challenges Tasks.
     - GET /virtualchallenge/{id}/tasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func listTasksWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/virtualchallenge/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Virtual Challenge

     - parameter _id: (path) The id of the Virtual Challenge to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsVirtualChallenge?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Virtual Challenge
     - GET /virtualchallenge/{id}

     - examples: [{contentType=application/json, example={
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
}}]
     - parameter _id: (path) The id of the Virtual Challenge to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsVirtualChallenge> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsVirtualChallenge> {
        var path = "/virtualchallenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsVirtualChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Virtual Challenge

     - parameter _id: (path) The id of the parent Project of the Virtual Challenge 
     - parameter name: (path) The name of the Virtual Challenge being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readByName(_id: Int64, name: String, completion: @escaping ((_ data: OrgMaprouletteModelsVirtualChallenge?,_ error: Error?) -> Void)) {
        readByNameWithRequestBuilder(_id: _id, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Virtual Challenge
     - GET /virtualchallengebyname/{name}

     - examples: [{contentType=application/json, example={
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
}}]
     - parameter _id: (path) The id of the parent Project of the Virtual Challenge 
     - parameter name: (path) The name of the Virtual Challenge being retrieved 

     - returns: RequestBuilder<OrgMaprouletteModelsVirtualChallenge> 
     */
    open class func readByNameWithRequestBuilder(_id: Int64, name: String) -> RequestBuilder<OrgMaprouletteModelsVirtualChallenge> {
        var path = "/virtualchallengebyname/{name}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsVirtualChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates a Virtual Challenge

     - parameter body: (body) The JSON structure for the Virtual Challenge body. 
     - parameter _id: (path) The ID of the Virtual Challenge that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: OrgMaprouletteModelsChallenge, _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsVirtualChallenge?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a Virtual Challenge
     - PUT /virtualchallenge/{id}

     - examples: [{contentType=application/json, example={
  "taskIdList" : [ 2, 2 ],
  "created" : 6,
  "name" : "name",
  "modified" : 1,
  "description" : "description",
  "id" : 0,
  "expiry" : 5,
  "ownerId" : 5
}}]
     - parameter body: (body) The JSON structure for the Virtual Challenge body. 
     - parameter _id: (path) The ID of the Virtual Challenge that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsVirtualChallenge> 
     */
    open class func updateWithRequestBuilder(body: OrgMaprouletteModelsChallenge, _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsVirtualChallenge> {
        var path = "/virtualchallenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsVirtualChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
