//
// ChallengeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ChallengeAPI {
    /**
     Add tasks to a challenge

     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addTasksToChallenge(_id: Int64, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addTasksToChallengeWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add tasks to a challenge
     - PUT /challenge/{id}/addTasks

     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func addTasksToChallengeWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/addTasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Add tasks to a challenge

     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter lineByLine: (query) If the JSON provided includes seperate GeoJSON on each line, then this must be true (optional)
     - parameter removeUnmatched: (query) Used to remove incomplete tasks that have been addressed externally since the last rebuild, assuming the source data represents all tasks outstanding. If set to true, all existing tasks in CREATED or SKIPPED status (only) will be removed prior to rebuilding with the assumption that they will be recreated if they still appear in the updated source data. If set to false, unmatched existing tasks are simply left as-is. (optional)
     - parameter dataOriginDate: (query)  (optional)
     - parameter skipSnapshot: (query) If included will skip recording a snapshot before proceeding. (By default false, so it will create snapshot.) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addTasksToChallengeFromFile(_id: Int64, apiKey: String, lineByLine: Bool? = nil, removeUnmatched: Bool? = nil, dataOriginDate: String? = nil, skipSnapshot: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addTasksToChallengeFromFileWithRequestBuilder(_id: _id, apiKey: apiKey, lineByLine: lineByLine, removeUnmatched: removeUnmatched, dataOriginDate: dataOriginDate, skipSnapshot: skipSnapshot).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add tasks to a challenge
     - PUT /challenge/{id}/addFileTasks

     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter lineByLine: (query) If the JSON provided includes seperate GeoJSON on each line, then this must be true (optional)
     - parameter removeUnmatched: (query) Used to remove incomplete tasks that have been addressed externally since the last rebuild, assuming the source data represents all tasks outstanding. If set to true, all existing tasks in CREATED or SKIPPED status (only) will be removed prior to rebuilding with the assumption that they will be recreated if they still appear in the updated source data. If set to false, unmatched existing tasks are simply left as-is. (optional)
     - parameter dataOriginDate: (query)  (optional)
     - parameter skipSnapshot: (query) If included will skip recording a snapshot before proceeding. (By default false, so it will create snapshot.) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addTasksToChallengeFromFileWithRequestBuilder(_id: Int64, apiKey: String, lineByLine: Bool? = nil, removeUnmatched: Bool? = nil, dataOriginDate: String? = nil, skipSnapshot: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/addFileTasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "lineByLine": lineByLine, 
                        "removeUnmatched": removeUnmatched, 
                        "dataOriginDate": dataOriginDate, 
                        "skipSnapshot": skipSnapshot
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create a batch of Challenges

     - parameter body: (body) The JSON structure for the challenge body, include the key &quot;children&quot; a Challenge JSON object within the array to create Task children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPost(body: [OrgMaprouletteModelsChallenge], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPostWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a batch of Challenges
     - POST /challenges

     - parameter body: (body) The JSON structure for the challenge body, include the key &quot;children&quot; a Challenge JSON object within the array to create Task children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPostWithRequestBuilder(body: [OrgMaprouletteModelsChallenge], apiKey: String) -> RequestBuilder<Void> {
        let path = "/challenges"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update a batch of Challenges

     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; in a Challenge JSON object within the array to create Task children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPut(body: [OrgMaprouletteModelsChallenge], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPutWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a batch of Challenges
     - PUT /challenges

     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; in a Challenge JSON object within the array to create Task children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPutWithRequestBuilder(body: [OrgMaprouletteModelsChallenge], apiKey: String) -> RequestBuilder<Void> {
        let path = "/challenges"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Clones a Challenge

     - parameter _id: (path) The id of the Challenge to clone. 
     - parameter name: (path) The name of the new challenge 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cloneChallenge(_id: Int64, name: String, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        cloneChallengeWithRequestBuilder(_id: _id, name: name, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Clones a Challenge
     - PUT /challenge/{id}/clone/{name}

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter _id: (path) The id of the Challenge to clone. 
     - parameter name: (path) The name of the new challenge 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func cloneChallengeWithRequestBuilder(_id: Int64, name: String, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        var path = "/challenge/{id}/clone/{name}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create a Challenge

     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; to create Task children objects. Although the model schema shows a hierarchy include &quot;general&quot;, &quot;creation&quot;, &quot;priority&quot; and &quot;extra&quot; this JSON structure can be flatten and you can exclude those top level keys and have the children in the root level. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: OrgMaprouletteModelsChallenge, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Challenge
     - POST /challenge

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; to create Task children objects. Although the model schema shows a hierarchy include &quot;general&quot;, &quot;creation&quot;, &quot;priority&quot; and &quot;extra&quot; this JSON structure can be flatten and you can exclude those top level keys and have the children in the root level. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func createWithRequestBuilder(body: OrgMaprouletteModelsChallenge, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        let path = "/challenge"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create Tasks for Challenge

     - parameter body: (body) The JSON array with Tasks. 
     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChildren(body: [OrgMaprouletteModelsTask], _id: Int64, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createChildrenWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Tasks for Challenge
     - POST /challenge/{id}/tasks

     - parameter body: (body) The JSON array with Tasks. 
     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func createChildrenWithRequestBuilder(body: [OrgMaprouletteModelsTask], _id: Int64, apiKey: String) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create Challenge from Github

     - parameter projectId: (path)  
     - parameter username: (path) username of the github user that owns the repo 
     - parameter repo: (path) Github repositories that contains the challenge files 
     - parameter name: (path) The name of the challenge that prefixes all the github files 
     - parameter _id: (path) The ID of the parent project 
     - parameter rebuild: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFromGithub(projectId: Int64, username: String, repo: String, name: String, _id: Object, rebuild: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createFromGithubWithRequestBuilder(projectId: projectId, username: username, repo: repo, name: name, _id: _id, rebuild: rebuild).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Challenge from Github
     - POST /project/{projectId}/challenge/{username}/{repo}/{name}

     - parameter projectId: (path)  
     - parameter username: (path) username of the github user that owns the repo 
     - parameter repo: (path) Github repositories that contains the challenge files 
     - parameter name: (path) The name of the challenge that prefixes all the github files 
     - parameter _id: (path) The ID of the parent project 
     - parameter rebuild: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func createFromGithubWithRequestBuilder(projectId: Int64, username: String, repo: String, name: String, _id: Object, rebuild: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/project/{projectId}/challenge/{username}/{repo}/{name}"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "rebuild": rebuild
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes an existing Challenge

     - parameter _id: (path) The id of the Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, apiKey: String, immediate: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, apiKey: apiKey, immediate: immediate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an existing Challenge
     - DELETE /challenge/{id}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, apiKey: String, immediate: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/challenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete Challenge Tags

     - parameter _id: (path) The ID of the challenge 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter tags: (query) A comma separated list of tags (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTagsFromItem(_id: Int64, apiKey: String, tags: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTagsFromItemWithRequestBuilder(_id: _id, apiKey: apiKey, tags: tags).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete Challenge Tags
     - DELETE /challenge/{id}/tags

     - parameter _id: (path) The ID of the challenge 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter tags: (query) A comma separated list of tags (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTagsFromItemWithRequestBuilder(_id: Int64, apiKey: String, tags: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tags"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "tags": tags
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Deletes all Challenge Tasks

     - parameter _id: (path) The id of the Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter statusFilters: (query) A comma separated list of status ID&#x27;s. 0 &#x3D; Created, 1 &#x3D; Fixed, 2 &#x3D; False Positive, 3 &#x3D; Skipped, 4 &#x3D; Deleted, 5 &#x3D; Already Fixed, 6 &#x3D; Too Hard (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTasks(_id: Int64, apiKey: String, statusFilters: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTasksWithRequestBuilder(_id: _id, apiKey: apiKey, statusFilters: statusFilters).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Deletes all Challenge Tasks
     - DELETE /challenge/{id}/tasks

     - parameter _id: (path) The id of the Challenge being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter statusFilters: (query) A comma separated list of status ID&#x27;s. 0 &#x3D; Created, 1 &#x3D; Fixed, 2 &#x3D; False Positive, 3 &#x3D; Skipped, 4 &#x3D; Deleted, 5 &#x3D; Already Fixed, 6 &#x3D; Too Hard (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTasksWithRequestBuilder(_id: Int64, apiKey: String, statusFilters: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "statusFilters": statusFilters
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves children for Challenge

     - parameter _id: (path) The id of the parent Challenge. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func expandedList(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        expandedListWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves children for Challenge
     - GET /challenge/{id}/children

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter _id: (path) The id of the parent Challenge. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func expandedListWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        var path = "/challenge/{id}/children"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Extended Find Challenge matching search criteria

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter pid: (query) The id of the project to limit your search too (optional)
     - parameter ps: (query) The search string used to match the project names. Default value is empty string, ie. will match all projects. (optional)
     - parameter pe: (query) Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true. (optional)
     - parameter ct: (query) Comma separated list of tags to limit the returned challenges by (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter ce: (query) Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true. (optional)
     - parameter cd: (query) The difficulty level to limit the returned challenges by. Following difficulty Integers can be used. 1 - Easy, 2 - Normal, 3 - Expert, -1 - Any difficulty. Default value is -1. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extendedFind(limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, pid: Object? = nil, ps: Object? = nil, pe: Object? = nil, ct: Object? = nil, cs: Object? = nil, ce: Object? = nil, cd: Object? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        extendedFindWithRequestBuilder(limit: limit, page: page, sort: sort, order: order, pid: pid, ps: ps, pe: pe, ct: ct, cs: cs, ce: ce, cd: cd).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Extended Find Challenge matching search criteria
     - GET /challenges/extendedFind

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter pid: (query) The id of the project to limit your search too (optional)
     - parameter ps: (query) The search string used to match the project names. Default value is empty string, ie. will match all projects. (optional)
     - parameter pe: (query) Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true. (optional)
     - parameter ct: (query) Comma separated list of tags to limit the returned challenges by (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter ce: (query) Boolean variable true|false that limits the search by enabled projects only if set to true. Default will is true. (optional)
     - parameter cd: (query) The difficulty level to limit the returned challenges by. Following difficulty Integers can be used. 1 - Easy, 2 - Normal, 3 - Expert, -1 - Any difficulty. Default value is -1. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func extendedFindWithRequestBuilder(limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, pid: Object? = nil, ps: Object? = nil, pe: Object? = nil, ct: Object? = nil, cs: Object? = nil, ce: Object? = nil, cd: Object? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges/extendedFind"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "sort": sort, 
                        "order": order, 
                        "pid": pid, 
                        "ps": ps, 
                        "pe": pe, 
                        "ct": ct, 
                        "cs": cs, 
                        "ce": ce, 
                        "cd": cd
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve all comments for Challenge

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extractComments(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        extractCommentsWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieve all comments for Challenge
     - GET /challenge/{id}/comments/extract

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func extractCommentsWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/comments/extract"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Extracts a Challenge Package

     - parameter _id: (path) The ID of the challenge 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extractPackage(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        extractPackageWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Extracts a Challenge Package
     - GET /challenge/{id}/extract

     - parameter _id: (path) The ID of the challenge 

     - returns: RequestBuilder<Void> 
     */
    open class func extractPackageWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/extract"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve summaries of all tasks for Challenge

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter status: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter reviewStatus: (query) Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed (optional)
     - parameter priority: (query) Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low (optional)
     - parameter exportProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extractTaskSummaries(_id: Int64, limit: Int? = nil, page: Int? = nil, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, exportProperties: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        extractTaskSummariesWithRequestBuilder(_id: _id, limit: limit, page: page, status: status, reviewStatus: reviewStatus, priority: priority, exportProperties: exportProperties).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieve summaries of all tasks for Challenge
     - GET /challenge/{id}/tasks/extract

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter status: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter reviewStatus: (query) Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed (optional)
     - parameter priority: (query) Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low (optional)
     - parameter exportProperties: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func extractTaskSummariesWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, exportProperties: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tasks/extract"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "status": status, 
                        "reviewStatus": reviewStatus, 
                        "priority": priority, 
                        "exportProperties": exportProperties
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find Challenge matching search criteria

     - parameter q: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled Challenges returned. Default value is true. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        findWithRequestBuilder(q: q, parentId: parentId, limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find Challenge matching search criteria
     - GET /challenges/find

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter q: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled Challenges returned. Default value is true. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func findWithRequestBuilder(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges/find"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "parentId": parentId?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Challenge GeoJSON

     - parameter _id: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter status: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter reviewStatus: (query) Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed (optional)
     - parameter priority: (query) Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeGeoJSON(_id: Int64, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getChallengeGeoJSONWithRequestBuilder(_id: _id, status: status, reviewStatus: reviewStatus, priority: priority).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieves Challenge GeoJSON
     - GET /challenge/view/{id}

     - parameter _id: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter status: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter reviewStatus: (query) Can filter the Tasks returned by the reviewStatus of the Task. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed (optional)
     - parameter priority: (query) Can filter the Tasks returned by the priority of the Task. 0 - High, 1 - Medium, 2 - Low (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getChallengeGeoJSONWithRequestBuilder(_id: Int64, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/view/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "status": status, 
                        "reviewStatus": reviewStatus, 
                        "priority": priority
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves clustered Task points

     - parameter _id: (path) The id of the parent project. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter limit: (query)  (optional)
     - parameter excludeLocked: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClusteredPoints(_id: Int64, filter: String? = nil, limit: Int? = nil, excludeLocked: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsClusteredPoint]?,_ error: Error?) -> Void)) {
        getClusteredPointsWithRequestBuilder(_id: _id, filter: filter, limit: limit, excludeLocked: excludeLocked).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves clustered Task points
     - GET /challenge/clustered/{id}

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}, {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
} ]}]
     - parameter _id: (path) The id of the parent project. 
     - parameter filter: (query) Can filter the Tasks returned by the status of the Task. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard (optional)
     - parameter limit: (query)  (optional)
     - parameter excludeLocked: (query)  (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> 
     */
    open class func getClusteredPointsWithRequestBuilder(_id: Int64, filter: String? = nil, limit: Int? = nil, excludeLocked: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> {
        var path = "/challenge/clustered/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter": filter, 
                        "limit": limit?.encodeToJSON(), 
                        "excludeLocked": excludeLocked
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Featured Challenges.

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeaturedChallenges(limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        getFeaturedChallengesWithRequestBuilder(limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Featured Challenges.
     - GET /challenges/featured

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func getFeaturedChallengesWithRequestBuilder(limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges/featured"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hottest Challenges.

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHotChallenges(limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        getHotChallengesWithRequestBuilder(limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Hottest Challenges.
     - GET /challenges/hot

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func getHotChallengesWithRequestBuilder(limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges/hot"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve challenges based on provided tags

     - parameter tags: (query) A comma separated list of tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getItemsBasedOnTags(tags: String? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        getItemsBasedOnTagsWithRequestBuilder(tags: tags, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve challenges based on provided tags
     - GET /challenges/tags

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter tags: (query) A comma separated list of tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func getItemsBasedOnTagsWithRequestBuilder(tags: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges/tags"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves nearby Tasks

     - parameter cid: (path)  
     - parameter proximityId: (path)  
     - parameter excludeSelfLocked: (query) exclude tasks this user has locked (always excludes tasks locked by others) (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 5. (optional)
     - parameter proximity: (query) Id of task around which geographically closest tasks are desired (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNearbyTasks(cid: Int64, proximityId: Int64, excludeSelfLocked: Bool? = nil, limit: Int? = nil, proximity: Object? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getNearbyTasksWithRequestBuilder(cid: cid, proximityId: proximityId, excludeSelfLocked: excludeSelfLocked, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves nearby Tasks
     - GET /challenge/{cid}/tasksNearby/{proximityId}

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter cid: (path)  
     - parameter proximityId: (path)  
     - parameter excludeSelfLocked: (query) exclude tasks this user has locked (always excludes tasks locked by others) (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 5. (optional)
     - parameter proximity: (query) Id of task around which geographically closest tasks are desired (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getNearbyTasksWithRequestBuilder(cid: Int64, proximityId: Int64, excludeSelfLocked: Bool? = nil, limit: Int? = nil, proximity: Object? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/challenge/{cid}/tasksNearby/{proximityId}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let proximityIdPreEscape = "\(proximityId)"
        let proximityIdPostEscape = proximityIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{proximityId}", with: proximityIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "excludeSelfLocked": excludeSelfLocked, 
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Preferred Challenges.

     - parameter limit: (query) Limit the number of results returned in each category. Default value is 10. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPreferredChallenges(limit: Int? = nil, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        getPreferredChallengesWithRequestBuilder(limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Preferred Challenges.
     - GET /challenges/preferred

     - examples: [{contentType=application/json, example={ }}]
     - parameter limit: (query) Limit the number of results returned in each category. Default value is 10. (optional)

     - returns: RequestBuilder<JSONValue> 
     */
    open class func getPreferredChallengesWithRequestBuilder(limit: Int? = nil) -> RequestBuilder<JSONValue> {
        let path = "/challenges/preferred"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<JSONValue>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves random Task

     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTasks(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTasksWithRequestBuilder(cid: cid, s: s, tags: tags, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves random Task
     - GET /challenge/{cid}/tasks/random

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTasksWithRequestBuilder(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/challenge/{cid}/tasks/random"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "s": s, 
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves prioritized random Task

     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTasksWithPriority(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTasksWithPriorityWithRequestBuilder(cid: cid, s: s, tags: tags, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves prioritized random Task
     - GET /challenge/{cid}/tasks/prioritizedTasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTasksWithPriorityWithRequestBuilder(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/challenge/{cid}/tasks/prioritizedTasks"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "s": s, 
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves random Task

     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTasks_0(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTasks_0WithRequestBuilder(cid: cid, s: s, tags: tags, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves random Task
     - GET /challenge/{cid}/tasks/randomTasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter cid: (path) The id of the parent Challenge limiting the tasks to only a descendent of that Challenge. 
     - parameter s: (query) The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive. (optional)
     - parameter tags: (query) A comma separated list of task tags. The search will only retrieve random tasks that contain those tags (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTasks_0WithRequestBuilder(cid: Int64, s: String? = nil, tags: String? = nil, limit: Int? = nil, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/challenge/{cid}/tasks/randomTasks"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "s": s, 
                        "tags": tags, 
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves next Task

     - parameter cid: (path) The id of the parent Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter statusList: (query) A comma separated list of Task status&#x27; to limit to the response by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSequentialNextTask(cid: Int64, _id: Int64, statusList: String? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        getSequentialNextTaskWithRequestBuilder(cid: cid, _id: _id, statusList: statusList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves next Task
     - GET /challenge/{cid}/nextTask/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter cid: (path) The id of the parent Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter statusList: (query) A comma separated list of Task status&#x27; to limit to the response by. (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func getSequentialNextTaskWithRequestBuilder(cid: Int64, _id: Int64, statusList: String? = nil) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/challenge/{cid}/nextTask/{id}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "statusList": statusList
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves previous Task

     - parameter cid: (path) The id of the parent Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter statusList: (query) A comma separated list of Task status&#x27; to limit to the response by. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSequentialPreviousTask(cid: Int64, _id: Int64, statusList: String? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        getSequentialPreviousTaskWithRequestBuilder(cid: cid, _id: _id, statusList: statusList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves previous Task
     - GET /challenge/{cid}/previousTask/{id}

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter cid: (path) The id of the parent Challenge. 
     - parameter _id: (path) The id of the current task being viewed, so that we can get context of what the next task should be 
     - parameter statusList: (query) A comma separated list of Task status&#x27; to limit to the response by. (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func getSequentialPreviousTaskWithRequestBuilder(cid: Int64, _id: Int64, statusList: String? = nil) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/challenge/{cid}/previousTask/{id}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "statusList": statusList
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve tags for Challenge

     - parameter _id: (path) The ID of the challenge 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTagsForChallenge(_id: Int64, completion: @escaping ((_ data: [OrgMaprouletteModelsTag]?,_ error: Error?) -> Void)) {
        getTagsForChallengeWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve tags for Challenge
     - GET /challenge/{id}/tags

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
}, {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
} ]}]
     - parameter _id: (path) The ID of the challenge 

     - returns: RequestBuilder<[OrgMaprouletteModelsTag]> 
     */
    open class func getTagsForChallengeWithRequestBuilder(_id: Int64) -> RequestBuilder<[OrgMaprouletteModelsTag]> {
        var path = "/challenge/{id}/tags"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTag]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves task clusters

     - parameter points: (query) The number of clusters that you want returned (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskClusters(points: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTaskCluster]?,_ error: Error?) -> Void)) {
        getTaskClustersWithRequestBuilder(points: points).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves task clusters
     - GET /taskCluster

     - examples: [{contentType=application/json, example=[ {
  "challengeIds" : [ 2, 2 ],
  "geometries" : "geometries",
  "numberOfPoints" : 6,
  "taskPriority" : 5,
  "clusterId" : 0,
  "taskId" : 1,
  "taskStatus" : 5,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "bounding" : "bounding"
}, {
  "challengeIds" : [ 2, 2 ],
  "geometries" : "geometries",
  "numberOfPoints" : 6,
  "taskPriority" : 5,
  "clusterId" : 0,
  "taskId" : 1,
  "taskStatus" : 5,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "bounding" : "bounding"
} ]}]
     - parameter points: (query) The number of clusters that you want returned (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTaskCluster]> 
     */
    open class func getTaskClustersWithRequestBuilder(points: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTaskCluster]> {
        let path = "/taskCluster"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "points": points?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTaskCluster]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves tasks in a cluster

     - parameter clusterId: (path) The id of the single cluster. 
     - parameter _id: (path) The id of the parent project. 
     - parameter points: (query) The number of clusters that you want returned (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTasksInCluster(clusterId: Int, _id: Object, points: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsClusteredPoint]?,_ error: Error?) -> Void)) {
        getTasksInClusterWithRequestBuilder(clusterId: clusterId, _id: _id, points: points).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves tasks in a cluster
     - GET /tasksInCluster/{clusterId}

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}, {
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
} ]}]
     - parameter clusterId: (path) The id of the single cluster. 
     - parameter _id: (path) The id of the parent project. 
     - parameter points: (query) The number of clusters that you want returned (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> 
     */
    open class func getTasksInClusterWithRequestBuilder(clusterId: Int, _id: Object, points: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsClusteredPoint]> {
        var path = "/tasksInCluster/{clusterId}"
        let clusterIdPreEscape = "\(clusterId)"
        let clusterIdPostEscape = clusterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clusterId}", with: clusterIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "points": points?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsClusteredPoint]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the Challenges.

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Only retrieve challenges that are enabled, default is false. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the Challenges.
     - GET /challenges

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Only retrieve challenges that are enabled, default is false. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func listWithRequestBuilder(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        let path = "/challenges"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the Challenges Tasks.

     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listChildren(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        listChildrenWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the Challenges Tasks.
     - GET /challenge/{id}/tasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func listChildrenWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/challenge/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List challenges in specified projects

     - parameter projectIds: (query) Comma-separated list of project ids for which child challenges are desired. Default value is empty string, ie. all projects. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled Challenges returned. Default value is true. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listing(projectIds: String? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, parentId: Object? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallengeListing]?,_ error: Error?) -> Void)) {
        listingWithRequestBuilder(projectIds: projectIds, limit: limit, page: page, onlyEnabled: onlyEnabled, parentId: parentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List challenges in specified projects
     - GET /challenges/listing

     - examples: [{contentType=application/json, example=[ {
  "parent" : 6,
  "name" : "name",
  "id" : 0,
  "enabled" : true
}, {
  "parent" : 6,
  "name" : "name",
  "id" : 0,
  "enabled" : true
} ]}]
     - parameter projectIds: (query) Comma-separated list of project ids for which child challenges are desired. Default value is empty string, ie. all projects. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled Challenges returned. Default value is true. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallengeListing]> 
     */
    open class func listingWithRequestBuilder(projectIds: String? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, parentId: Object? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallengeListing]> {
        let path = "/challenges/listing"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "projectIds": projectIds, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled, 
                        "parentId": parentId
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallengeListing]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Match OSM Changesets

     - parameter _id: (path) The ID of the challenge 
     - parameter skipSet: (query) Will skip any tasks if the changesets are already set if this is set to true (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func matchChangeSets(_id: Int64, skipSet: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        matchChangeSetsWithRequestBuilder(_id: _id, skipSet: skipSet).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Match OSM Changesets
     - GET /challenge/{id}/matchChangesets

     - parameter _id: (path) The ID of the challenge 
     - parameter skipSet: (query) Will skip any tasks if the changesets are already set if this is set to true (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func matchChangeSetsWithRequestBuilder(_id: Int64, skipSet: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/matchChangesets"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "skipSet": skipSet
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Move Challenge to another Project

     - parameter projectId: (path) The ID of the project you are moving the challenge too. 
     - parameter _id: (path) The ID of the challenge 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func moveChallenge(projectId: Int64, _id: Int64, completion: @escaping ((_ data: [OrgMaprouletteModelsTag]?,_ error: Error?) -> Void)) {
        moveChallengeWithRequestBuilder(projectId: projectId, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Move Challenge to another Project
     - POST /challenge/{id}/project/{projectId}

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
}, {
  "created" : 6,
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : 1,
  "id" : 0
} ]}]
     - parameter projectId: (path) The ID of the project you are moving the challenge too. 
     - parameter _id: (path) The ID of the challenge 

     - returns: RequestBuilder<[OrgMaprouletteModelsTag]> 
     */
    open class func moveChallengeWithRequestBuilder(projectId: Int64, _id: Int64) -> RequestBuilder<[OrgMaprouletteModelsTag]> {
        var path = "/challenge/{id}/project/{projectId}"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTag]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Challenge

     - parameter _id: (path) The id of the Challenge to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Challenge
     - GET /challenge/{id}

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter _id: (path) The id of the Challenge to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        var path = "/challenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Challenge

     - parameter _id: (path) The id of the parent Project of the Challenge 
     - parameter name: (path) The name of the Challenge being retrieved 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readByName(_id: Int64, name: String, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        readByNameWithRequestBuilder(_id: _id, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Challenge
     - GET /project/{id}/challenge/{name}

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter _id: (path) The id of the parent Project of the Challenge 
     - parameter name: (path) The name of the Challenge being retrieved 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func readByNameWithRequestBuilder(_id: Int64, name: String) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        var path = "/project/{id}/challenge/{name}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rebuild a Challenge

     - parameter _id: (path) The id of the Challenge to rebuild. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter removeUnmatched: (query) Used to remove incomplete tasks that have been addressed externally since the last rebuild, assuming the source data represents all tasks outstanding. If set to true, all existing tasks in CREATED or SKIPPED status (only) will be removed prior to rebuilding with the assumption that they will be recreated if they still appear in the updated source data. If set to false, unmatched existing tasks are simply left as-is. (optional)
     - parameter skipSnapshot: (query) If included will skip recording a snapshot before proceeding. (By default false, so it will create snapshot.) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rebuildChallenge(_id: Int64, apiKey: String, removeUnmatched: Bool? = nil, skipSnapshot: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rebuildChallengeWithRequestBuilder(_id: _id, apiKey: apiKey, removeUnmatched: removeUnmatched, skipSnapshot: skipSnapshot).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Rebuild a Challenge
     - PUT /challenge/{id}/rebuild

     - parameter _id: (path) The id of the Challenge to rebuild. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter removeUnmatched: (query) Used to remove incomplete tasks that have been addressed externally since the last rebuild, assuming the source data represents all tasks outstanding. If set to true, all existing tasks in CREATED or SKIPPED status (only) will be removed prior to rebuilding with the assumption that they will be recreated if they still appear in the updated source data. If set to false, unmatched existing tasks are simply left as-is. (optional)
     - parameter skipSnapshot: (query) If included will skip recording a snapshot before proceeding. (By default false, so it will create snapshot.) (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func rebuildChallengeWithRequestBuilder(_id: Int64, apiKey: String, removeUnmatched: Bool? = nil, skipSnapshot: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/rebuild"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "removeUnmatched": removeUnmatched, 
                        "skipSnapshot": skipSnapshot
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Reset Task Instructions

     - parameter _id: (path) The id of the parent project. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resetTaskInstructions(_id: Int64, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resetTaskInstructionsWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Reset Task Instructions
     - PUT /challenge/{id}/resetTaskInstructions

     - parameter _id: (path) The id of the parent project. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func resetTaskInstructionsWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/resetTaskInstructions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieve all comments for Challenge

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveComments(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        retrieveCommentsWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieve all comments for Challenge
     - GET /challenge/{id}/comments

     - parameter _id: (path) The ID of the challenge 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func retrieveCommentsWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/comments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Undeletes a Challenge

     - parameter _id: (path) The id of the Project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func undelete(_id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        undeleteWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Undeletes a Challenge
     - PUT /challenge/{id}/undelete

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter _id: (path) The id of the Project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func undeleteWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        var path = "/challenge/{id}/undelete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Updates a Challenge

     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; to create or update Task children objects. 
     - parameter _id: (path) The ID of the Challenge that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: OrgMaprouletteModelsChallenge, _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsChallenge?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a Challenge
     - PUT /challenge/{id}

     - examples: [{contentType=application/json, example={
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}}]
     - parameter body: (body) The JSON structure for the Challenge body, include the key &quot;children&quot; to create or update Task children objects. 
     - parameter _id: (path) The ID of the Challenge that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsChallenge> 
     */
    open class func updateWithRequestBuilder(body: OrgMaprouletteModelsChallenge, _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsChallenge> {
        var path = "/challenge/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsChallenge>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create Tasks for Challenge

     - parameter body: (body) The JSON array with Tasks. 
     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChildren(body: [OrgMaprouletteModelsTask], _id: Int64, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateChildrenWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Tasks for Challenge
     - PUT /challenge/{id}/tasks

     - parameter body: (body) The JSON array with Tasks. 
     - parameter _id: (path) The id of the parent Challenge where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func updateChildrenWithRequestBuilder(body: [OrgMaprouletteModelsTask], _id: Int64, apiKey: String) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update Task Priorities

     - parameter _id: (path) The id of the parent project. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateTaskPriorities(_id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        updateTaskPrioritiesWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Task Priorities
     - PUT /challenge/{id}/updateTaskPriorities

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the parent project. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func updateTaskPrioritiesWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/challenge/{id}/updateTaskPriorities"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
