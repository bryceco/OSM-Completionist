//
// ProjectAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProjectAPI {
    /**
     Add Challenge to a virtual Project

     - parameter projectId: (path) The ID of the project you are adding the challenge to. 
     - parameter _id: (path) The ID of the challenge 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addChallenge(projectId: Int64, _id: Int64, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        addChallengeWithRequestBuilder(projectId: projectId, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add Challenge to a virtual Project
     - POST /project/{projectId}/challenge/{id}/add

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter projectId: (path) The ID of the project you are adding the challenge to. 
     - parameter _id: (path) The ID of the challenge 

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func addChallengeWithRequestBuilder(projectId: Int64, _id: Int64) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        var path = "/project/{projectId}/challenge/{id}/add"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a batch of Projects

     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; a Project JSON object within the array to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPost(body: [OrgMaprouletteModelsProject], apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        batchUploadPostWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a batch of Projects
     - POST /projects

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; a Project JSON object within the array to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func batchUploadPostWithRequestBuilder(body: [OrgMaprouletteModelsProject], apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        let path = "/projects"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update a batch of Projects

     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; a Project JSON object within the array to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPut(body: [OrgMaprouletteModelsProject], apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        batchUploadPutWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a batch of Projects
     - PUT /projects

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; a Project JSON object within the array to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func batchUploadPutWithRequestBuilder(body: [OrgMaprouletteModelsProject], apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        let path = "/projects"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create a Project

     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: OrgMaprouletteModelsProject, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Project
     - POST /project

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; to create Challenge children objects. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func createWithRequestBuilder(body: OrgMaprouletteModelsProject, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsProject> {
        let path = "/project"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create challenges for project

     - parameter body: (body) The JSON array with challenges, include the key &quot;children&quot; to create or update Task children objects within the challenge object. 
     - parameter _id: (path) The id of the parent project where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createChildren(body: [OrgMaprouletteModelsChallenge], _id: Int64, apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createChildrenWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create challenges for project
     - POST /project/{id}/challenges

     - parameter body: (body) The JSON array with challenges, include the key &quot;children&quot; to create or update Task children objects within the challenge object. 
     - parameter _id: (path) The id of the parent project where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func createChildrenWithRequestBuilder(body: [OrgMaprouletteModelsChallenge], _id: Int64, apiKey: String) -> RequestBuilder<Void> {
        var path = "/project/{id}/challenges"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deletes an existing Project

     - parameter _id: (path) The id of the project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, apiKey: String, immediate: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, apiKey: apiKey, immediate: immediate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an existing Project
     - DELETE /project/{id}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query) If set to true, will delete the virtual challenge immediately instead of delayed (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, apiKey: String, immediate: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/project/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves children for project

     - parameter _id: (path) The id of the parent project. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func expandedList(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        expandedListWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves children for project
     - GET /project/{id}/children

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter _id: (path) The id of the parent project. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func expandedListWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/project/{id}/children"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve summaries of all tasks in a Project

     - parameter projectId: (path) The ID of the project 
     - parameter cId: (query) A list of challengeIds to include. If not provided, then all challenges in the project are used. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extractAllTaskSummaries(projectId: Int64, cId: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        extractAllTaskSummariesWithRequestBuilder(projectId: projectId, cId: cId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieve summaries of all tasks in a Project
     - GET /project/{projectId}/tasks/extract

     - parameter projectId: (path) The ID of the project 
     - parameter cId: (query) A list of challengeIds to include. If not provided, then all challenges in the project are used. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func extractAllTaskSummariesWithRequestBuilder(projectId: Int64, cId: String? = nil) -> RequestBuilder<Void> {
        var path = "/project/{projectId}/tasks/extract"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cId": cId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves already existing Projects based on a given list of ids

     - parameter projectIds: (query) Comma-separated list of project ids for which projects are desired. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func fetch(projectIds: String, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        fetchWithRequestBuilder(projectIds: projectIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves already existing Projects based on a given list of ids
     - GET /projectsById

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter projectIds: (query) Comma-separated list of project ids for which projects are desired. 

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func fetchWithRequestBuilder(projectIds: String) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        let path = "/projectsById"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "projectIds": projectIds
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Find project matching search criteria

     - parameter q: (query) The search string used to match the project names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func find(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        findWithRequestBuilder(q: q, parentId: parentId, limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Find project matching search criteria
     - GET /projects/find

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter q: (query) The search string used to match the project names. Default value is empty string, ie. will match everything. (optional)
     - parameter parentId: (query) This field will be ignored for this request (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func findWithRequestBuilder(q: String? = nil, parentId: Int64? = nil, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        let path = "/projects/find"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "parentId": parentId?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves clustered challenge points

     - parameter _id: (path) The id of the parent project. 
     - parameter challenges: (query) The challenge search string. Retrieve only challenge clustered points that have the search string contained within the challenge name. Match is case insensitive. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClusteredPoints(_id: Int64, challenges: String? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsClusteredPoint?,_ error: Error?) -> Void)) {
        getClusteredPointsWithRequestBuilder(_id: _id, challenges: challenges).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves clustered challenge points
     - GET /project/clustered/{id}

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}}]
     - parameter _id: (path) The id of the parent project. 
     - parameter challenges: (query) The challenge search string. Retrieve only challenge clustered points that have the search string contained within the challenge name. Match is case insensitive. (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsClusteredPoint> 
     */
    open class func getClusteredPointsWithRequestBuilder(_id: Int64, challenges: String? = nil) -> RequestBuilder<OrgMaprouletteModelsClusteredPoint> {
        var path = "/project/clustered/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "challenges": challenges
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsClusteredPoint>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve featured projects

     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFeaturedProjects(onlyEnabled: Bool? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        getFeaturedProjectsWithRequestBuilder(onlyEnabled: onlyEnabled, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve featured projects
     - GET /projects/featured

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func getFeaturedProjectsWithRequestBuilder(onlyEnabled: Bool? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        let path = "/projects/featured"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "onlyEnabled": onlyEnabled, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves random Task

     - parameter _id: (path) The id of the parent project limiting the tasks to only a descendent of that project. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getRandomTasks(_id: Int64, limit: Int? = nil, proximity: Int64? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getRandomTasksWithRequestBuilder(_id: _id, limit: limit, proximity: proximity).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves random Task
     - GET /project/{id}/tasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter _id: (path) The id of the parent project limiting the tasks to only a descendent of that project. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 1. (optional)
     - parameter proximity: (query) Id of task that you wish to find the next task based on the proximity of that task (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getRandomTasksWithRequestBuilder(_id: Int64, limit: Int? = nil, proximity: Int64? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/project/{id}/tasks"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "proximity": proximity?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves clustered challenge points

     - parameter search: (query) The challenge search parameters. This is a URL encoded JSON object containing multiple different search parameters. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSearchedClusteredPoints(search: String? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsClusteredPoint?,_ error: Error?) -> Void)) {
        getSearchedClusteredPointsWithRequestBuilder(search: search).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves clustered challenge points
     - GET /project/search/clustered

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "mappedOn" : 2,
  "bundleId" : 7,
  "suggestedFix" : "suggestedFix",
  "title" : "title",
  "blurb" : "blurb",
  "type" : 9,
  "priority" : 6,
  "parentId" : 1,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "isBundlePrimary" : true,
  "bounding" : "bounding",
  "difficulty" : 7,
  "parentName" : "parentName",
  "ownerName" : "ownerName",
  "pointReview" : {
    "reviewRequestedBy" : 7,
    "reviewedAt" : 1,
    "reviewStartedAt" : 1,
    "reviewStatus" : 4,
    "reviewedBy" : 1
  },
  "modified" : 2,
  "id" : 0,
  "status" : 3
}}]
     - parameter search: (query) The challenge search parameters. This is a URL encoded JSON object containing multiple different search parameters. (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsClusteredPoint> 
     */
    open class func getSearchedClusteredPointsWithRequestBuilder(search: String? = nil) -> RequestBuilder<OrgMaprouletteModelsClusteredPoint> {
        let path = "/project/search/clustered"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "search": search
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsClusteredPoint>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the projects.

     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func list(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        listWithRequestBuilder(limit: limit, page: page, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the projects.
     - GET /projects

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func listWithRequestBuilder(limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        let path = "/projects"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the projects challenges.

     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listChildren(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        listChildrenWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the projects challenges.
     - GET /project/{id}/challenges

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter _id: (path) The project ID. 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func listChildrenWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        var path = "/project/{id}/challenges"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the managed projects.

     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter onlyOwned: (query) Whether to only returned projects that are owned by this user. By default set to false and returns all of them (optional)
     - parameter searchString: (query) A simple search string that will filter out for a specific set of projects matching the search string. (optional)
     - parameter sort: (query) The column to sort by. Default column is \&quot;display_name\&quot; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listManagedProjects(apiKey: String, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, onlyOwned: Bool? = nil, searchString: String? = nil, sort: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        listManagedProjectsWithRequestBuilder(apiKey: apiKey, limit: limit, page: page, onlyEnabled: onlyEnabled, onlyOwned: onlyOwned, searchString: searchString, sort: sort).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the managed projects.
     - GET /projects/managed

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter onlyEnabled: (query) Flag to set if only wanting enabled projects returned. Default value is true. (optional)
     - parameter onlyOwned: (query) Whether to only returned projects that are owned by this user. By default set to false and returns all of them (optional)
     - parameter searchString: (query) A simple search string that will filter out for a specific set of projects matching the search string. (optional)
     - parameter sort: (query) The column to sort by. Default column is \&quot;display_name\&quot; (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func listManagedProjectsWithRequestBuilder(apiKey: String, limit: Int? = nil, page: Int? = nil, onlyEnabled: Bool? = nil, onlyOwned: Bool? = nil, searchString: String? = nil, sort: String? = nil) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        let path = "/projects/managed"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "onlyEnabled": onlyEnabled, 
                        "onlyOwned": onlyOwned, 
                        "searchString": searchString, 
                        "sort": sort
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves an already existing Project

     - parameter _id: (path) The id of the project to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Project
     - GET /project/{id}

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter _id: (path) The id of the project to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/project/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Project

     - parameter name: (path) The name of the project being retrieved 
     - parameter _id: (query) Ignore this field, it is not used (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func readByName(name: String, _id: Int64? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        readByNameWithRequestBuilder(name: name, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Project
     - GET /projectByName/{name}

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter name: (path) The name of the project being retrieved 
     - parameter _id: (query) Ignore this field, it is not used (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func readByNameWithRequestBuilder(name: String, _id: Int64? = nil) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/projectByName/{name}"
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "id": _id?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove Challenge from a virtual Project

     - parameter projectId: (path) The ID of the project you are removeing the challenge from. 
     - parameter _id: (path) The ID of the challenge 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeChallenge(projectId: Int64, _id: Int64, completion: @escaping ((_ data: [OrgMaprouletteModelsProject]?,_ error: Error?) -> Void)) {
        removeChallengeWithRequestBuilder(projectId: projectId, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove Challenge from a virtual Project
     - POST /project/{projectId}/challenge/{id}/remove

     - examples: [{contentType=application/json, example=[ {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}, {
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
} ]}]
     - parameter projectId: (path) The ID of the project you are removeing the challenge from. 
     - parameter _id: (path) The ID of the challenge 

     - returns: RequestBuilder<[OrgMaprouletteModelsProject]> 
     */
    open class func removeChallengeWithRequestBuilder(projectId: Int64, _id: Int64) -> RequestBuilder<[OrgMaprouletteModelsProject]> {
        var path = "/project/{projectId}/challenge/{id}/remove"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsProject]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve all comments for Project

     - parameter _id: (path) The ID of the project 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func retrieveComments(_id: Int64, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        retrieveCommentsWithRequestBuilder(_id: _id, limit: limit, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Retrieve all comments for Project
     - GET /project/{id}/comments

     - parameter _id: (path) The ID of the project 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func retrieveCommentsWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        var path = "/project/{id}/comments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Undeletes a Project

     - parameter _id: (path) The id of the Project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func undelete(_id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        undeleteWithRequestBuilder(_id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Undeletes a Project
     - PUT /project/{id}/undelete

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter _id: (path) The id of the Project being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func undeleteWithRequestBuilder(_id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/project/{id}/undelete"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Updates a Project

     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; to create or update Challenge children objects. 
     - parameter _id: (path) The ID of the project that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: OrgMaprouletteModelsProject, _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a Project
     - PUT /project/{id}

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter body: (body) The JSON structure for the project body, include the key &quot;children&quot; to create or update Challenge children objects. 
     - parameter _id: (path) The ID of the project that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func updateWithRequestBuilder(body: OrgMaprouletteModelsProject, _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/project/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create challenges for project

     - parameter body: (body) The JSON array with challenges, include the key &quot;children&quot; to create or update Task children objects within the challenge object. 
     - parameter _id: (path) The id of the parent project where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateChildren(body: [OrgMaprouletteModelsChallenge], _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsProject?,_ error: Error?) -> Void)) {
        updateChildrenWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create challenges for project
     - PUT /project/{id}/challenges

     - examples: [{contentType=application/json, example={
  "owner" : 6,
  "featured" : true,
  "deleted" : true,
  "created" : 1,
  "displayName" : "displayName",
  "name" : "name",
  "modified" : 5,
  "description" : "description",
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "id" : 0,
  "isVirtual" : true,
  "enabled" : true
}}]
     - parameter body: (body) The JSON array with challenges, include the key &quot;children&quot; to create or update Task children objects within the challenge object. 
     - parameter _id: (path) The id of the parent project where all the children are being created. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsProject> 
     */
    open class func updateChildrenWithRequestBuilder(body: [OrgMaprouletteModelsChallenge], _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsProject> {
        var path = "/project/{id}/challenges"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsProject>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
