//
// Apiv2API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class Apiv2API {
    /**

     - parameter challengeId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func exportChallengeSnapshots(challengeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        exportChallengeSnapshotsWithRequestBuilder(challengeId: challengeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /snapshot/challenge/{challengeId}/export
     - 

     - parameter challengeId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func exportChallengeSnapshotsWithRequestBuilder(challengeId: Int64) -> RequestBuilder<Void> {
        var path = "/snapshot/challenge/{challengeId}/export"
        let challengeIdPreEscape = "\(challengeId)"
        let challengeIdPostEscape = challengeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{challengeId}", with: challengeIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter reviewStatus: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter exportProperties: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func extractTaskSummaries(_id: Int64, limit: Int? = nil, page: Int? = nil, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, exportProperties: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        extractTaskSummariesWithRequestBuilder(_id: _id, limit: limit, page: page, status: status, reviewStatus: reviewStatus, priority: priority, exportProperties: exportProperties).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /challenge/{id}/tasks/extract
     - 

     - parameter _id: (path)  
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter reviewStatus: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter exportProperties: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func extractTaskSummariesWithRequestBuilder(_id: Int64, limit: Int? = nil, page: Int? = nil, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, exportProperties: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/{id}/tasks/extract"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "status": status, 
                        "reviewStatus": reviewStatus, 
                        "priority": priority, 
                        "exportProperties": exportProperties
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter status: (query)  (optional)
     - parameter reviewStatus: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeGeoJSON(_id: Int64, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getChallengeGeoJSONWithRequestBuilder(_id: _id, status: status, reviewStatus: reviewStatus, priority: priority).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /challenge/view/{id}
     - 

     - parameter _id: (path)  
     - parameter status: (query)  (optional)
     - parameter reviewStatus: (query)  (optional)
     - parameter priority: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getChallengeGeoJSONWithRequestBuilder(_id: Int64, status: String? = nil, reviewStatus: String? = nil, priority: String? = nil) -> RequestBuilder<Void> {
        var path = "/challenge/view/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "status": status, 
                        "reviewStatus": reviewStatus, 
                        "priority": priority
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter snapshotId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeSnapshot(snapshotId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getChallengeSnapshotWithRequestBuilder(snapshotId: snapshotId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /snapshot/{snapshotId}
     - 

     - parameter snapshotId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getChallengeSnapshotWithRequestBuilder(snapshotId: Int64) -> RequestBuilder<Void> {
        var path = "/snapshot/{snapshotId}"
        let snapshotIdPreEscape = "\(snapshotId)"
        let snapshotIdPostEscape = snapshotIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{snapshotId}", with: snapshotIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter challengeId: (path)  
     - parameter includeAllData: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeSnapshotList(challengeId: Int64, includeAllData: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getChallengeSnapshotListWithRequestBuilder(challengeId: challengeId, includeAllData: includeAllData).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /snapshot/challenge/{challengeId}/list
     - 

     - parameter challengeId: (path)  
     - parameter includeAllData: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getChallengeSnapshotListWithRequestBuilder(challengeId: Int64, includeAllData: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/snapshot/challenge/{challengeId}/list"
        let challengeIdPreEscape = "\(challengeId)"
        let challengeIdPostEscape = challengeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{challengeId}", with: challengeIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "includeAllData": includeAllData
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter projectList: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter onlyEnabled: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getChallengeSummaries(projectList: String? = nil, priority: String? = nil, onlyEnabled: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getChallengeSummariesWithRequestBuilder(projectList: projectList, priority: priority, onlyEnabled: onlyEnabled).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /data/challenge/summary
     - 

     - parameter projectList: (query)  (optional)
     - parameter priority: (query)  (optional)
     - parameter onlyEnabled: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getChallengeSummariesWithRequestBuilder(projectList: String? = nil, priority: String? = nil, onlyEnabled: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/data/challenge/summary"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "projectList": projectList, 
                        "priority": priority, 
                        "onlyEnabled": onlyEnabled
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter points: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTaskClusters(points: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTaskClustersWithRequestBuilder(points: points).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /taskCluster
     - 

     - parameter points: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getTaskClustersWithRequestBuilder(points: Int? = nil) -> RequestBuilder<Void> {
        let path = "/taskCluster"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "points": points?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _left: (path)  
     - parameter bottom: (path)  
     - parameter _right: (path)  
     - parameter top: (path)  
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter excludeLocked: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter includeTotal: (query)  (optional)
     - parameter includeGeometries: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTasksInBoundingBox(_left: Double, bottom: Double, _right: Double, top: Double, limit: Int? = nil, page: Int? = nil, excludeLocked: Bool? = nil, sort: String? = nil, order: String? = nil, includeTotal: Bool? = nil, includeGeometries: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTasksInBoundingBoxWithRequestBuilder(_left: _left, bottom: bottom, _right: _right, top: top, limit: limit, page: page, excludeLocked: excludeLocked, sort: sort, order: order, includeTotal: includeTotal, includeGeometries: includeGeometries).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /tasks/box/{left}/{bottom}/{right}/{top}
     - 

     - parameter _left: (path)  
     - parameter bottom: (path)  
     - parameter _right: (path)  
     - parameter top: (path)  
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter excludeLocked: (query)  (optional)
     - parameter sort: (query)  (optional)
     - parameter order: (query)  (optional)
     - parameter includeTotal: (query)  (optional)
     - parameter includeGeometries: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getTasksInBoundingBoxWithRequestBuilder(_left: Double, bottom: Double, _right: Double, top: Double, limit: Int? = nil, page: Int? = nil, excludeLocked: Bool? = nil, sort: String? = nil, order: String? = nil, includeTotal: Bool? = nil, includeGeometries: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/tasks/box/{left}/{bottom}/{right}/{top}"
        let _leftPreEscape = "\(_left)"
        let _leftPostEscape = _leftPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{left}", with: _leftPostEscape, options: .literal, range: nil)
        let bottomPreEscape = "\(bottom)"
        let bottomPostEscape = bottomPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bottom}", with: bottomPostEscape, options: .literal, range: nil)
        let _rightPreEscape = "\(_right)"
        let _rightPostEscape = _rightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{right}", with: _rightPostEscape, options: .literal, range: nil)
        let topPreEscape = "\(top)"
        let topPostEscape = topPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{top}", with: topPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "excludeLocked": excludeLocked, 
                        "sort": sort, 
                        "order": order, 
                        "includeTotal": includeTotal, 
                        "includeGeometries": includeGeometries
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter challengeId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func recordChallengeSnapshot(challengeId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        recordChallengeSnapshotWithRequestBuilder(challengeId: challengeId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /snapshot/challenge/{challengeId}/record
     - 

     - parameter challengeId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func recordChallengeSnapshotWithRequestBuilder(challengeId: Int64) -> RequestBuilder<Void> {
        var path = "/snapshot/challenge/{challengeId}/record"
        let challengeIdPreEscape = "\(challengeId)"
        let challengeIdPostEscape = challengeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{challengeId}", with: challengeIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
