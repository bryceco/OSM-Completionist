//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class UserAPI {
    /**
     Add user to project group

     - parameter userId: (path) The id of the user to add. If using an OSM user id, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user id is to be treated as an OSM user id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addUserToProject(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addUserToProjectWithRequestBuilder(userId: userId, projectId: projectId, groupType: groupType, isOSMUserId: isOSMUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add user to project group
     - POST /user/{userId}/project/{projectId}/{groupType}

     - parameter userId: (path) The id of the user to add. If using an OSM user id, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user id is to be treated as an OSM user id (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addUserToProjectWithRequestBuilder(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/user/{userId}/project/{projectId}/{groupType}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let groupTypePreEscape = "\(groupType)"
        let groupTypePostEscape = groupTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupType}", with: groupTypePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isOSMUserId": isOSMUserId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Adds a list of user to project group

     - parameter body: (body) A JSON array of user ids. If using OSM user Ids then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addUsersToProject(body: [Int], projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addUsersToProjectWithRequestBuilder(body: body, projectId: projectId, groupType: groupType, isOSMUserId: isOSMUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Adds a list of user to project group
     - PUT /user/project/{projectId}/{groupType}

     - parameter body: (body) A JSON array of user ids. If using OSM user Ids then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func addUsersToProjectWithRequestBuilder(body: [Int], projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/user/project/{projectId}/{groupType}"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let groupTypePreEscape = "\(groupType)"
        let groupTypePostEscape = groupTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupType}", with: groupTypePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isOSMUserId": isOSMUserId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete user notifications

     - parameter userId: (path) The id of the user that owns the notifications 
     - parameter notificationIds: (query) One or more comma-separated ids of notifications to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteNotifications(userId: Int64, notificationIds: Object, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteNotificationsWithRequestBuilder(userId: userId, notificationIds: notificationIds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete user notifications
     - DELETE /user/{userId}/notifications

     - parameter userId: (path) The id of the user that owns the notifications 
     - parameter notificationIds: (query) One or more comma-separated ids of notifications to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteNotificationsWithRequestBuilder(userId: Int64, notificationIds: Object) -> RequestBuilder<Void> {
        var path = "/user/{userId}/notifications"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "notificationIds": notificationIds
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Deletes a user from the database

     - parameter osmId: (path) The OSM id of the user you want to delete 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter anonymize: (query) Whether to anonymize the users data, false by default (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(osmId: Int64, apiKey: String, anonymize: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteUserWithRequestBuilder(osmId: osmId, apiKey: apiKey, anonymize: anonymize).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes a user from the database
     - DELETE /user/{osmId}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter osmId: (path) The OSM id of the user you want to delete 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter anonymize: (query) Whether to anonymize the users data, false by default (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteUserWithRequestBuilder(osmId: Int64, apiKey: String, anonymize: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/user/{osmId}"
        let osmIdPreEscape = "\(osmId)"
        let osmIdPostEscape = osmIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{osmId}", with: osmIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "anonymize": anonymize
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Generates an API_KEY for a specified user

     - parameter userId: (path) The id of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func generateAPIKey(userId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        generateAPIKeyWithRequestBuilder(userId: userId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Generates an API_KEY for a specified user
     - PUT /user/{userId}/apikey

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter userId: (path) The id of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func generateAPIKeyWithRequestBuilder(userId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/user/{userId}/apikey"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves Users notification subscriptions

     - parameter userId: (path) The id of the user to retrieve the subscriptions for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNotificationSubscriptions(userId: Int64, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        getNotificationSubscriptionsWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users notification subscriptions
     - GET /user/{userId}/notificationSubscriptions

     - examples: [{contentType=application/json, example={ }}]
     - parameter userId: (path) The id of the user to retrieve the subscriptions for 

     - returns: RequestBuilder<JSONValue> 
     */
    open class func getNotificationSubscriptionsWithRequestBuilder(userId: Int64) -> RequestBuilder<JSONValue> {
        var path = "/user/{userId}/notificationSubscriptions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Users public Json information

     - parameter userId: (path) The id of the user to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicUser(userId: Int64, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        getPublicUserWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users public Json information
     - GET /user/{userId}/public

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter userId: (path) The id of the user to retrieve 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func getPublicUserWithRequestBuilder(userId: Int64) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/user/{userId}/public"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Users public Json information

     - parameter username: (path) The OSM username of the user to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPublicUserByOSMUsername(username: String, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        getPublicUserByOSMUsernameWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users public Json information
     - GET /osmuser/{username}/public

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter username: (path) The OSM username of the user to retrieve 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func getPublicUserByOSMUsernameWithRequestBuilder(username: String) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/osmuser/{username}/public"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves Users Saved Challenged

     - parameter userId: (path) The id of the user to retrieve the challenges for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSavedChallenges(userId: Int64, apiKey: String, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsChallenge]?,_ error: Error?) -> Void)) {
        getSavedChallengesWithRequestBuilder(userId: userId, apiKey: apiKey, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users Saved Challenged
     - GET /user/{userId}/saved

     - examples: [{contentType=application/json, example=[ {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
}, {
  "created" : 6,
  "description" : "description",
  "priority" : {
    "lowPriorityRule" : "lowPriorityRule",
    "defaultPriority" : 3,
    "highPriorityRule" : "highPriorityRule",
    "mediumPriorityRule" : "mediumPriorityRule"
  },
  "statusMessage" : "statusMessage",
  "bounding" : "bounding",
  "general" : {
    "owner" : 5,
    "difficulty" : 2,
    "parent" : 5,
    "featured" : true,
    "instruction" : "instruction",
    "popularity" : 9,
    "checkinComment" : "checkinComment",
    "checkinSource" : "checkinSource",
    "challengeType" : 7,
    "blurb" : "blurb",
    "enabled" : true,
    "hasSuggestedFixes" : true
  },
  "deleted" : true,
  "dataOriginDate" : 6,
  "extra" : {
    "preferredTags" : "preferredTags",
    "exportableProperties" : "exportableProperties",
    "defaultZoom" : 2,
    "taskStyles" : "taskStyles",
    "maxZoom" : 7,
    "defaultBasemapId" : "defaultBasemapId",
    "minZoom" : 4,
    "defaultBasemap" : 1,
    "customBasemap" : "customBasemap",
    "updateTasks" : true,
    "osmIdProperty" : "osmIdProperty"
  },
  "name" : "name",
  "modified" : 1,
  "lastTaskRefresh" : 1,
  "location" : "location",
  "id" : 0,
  "creation" : {
    "remoteGeoJson" : "remoteGeoJson",
    "overpassQL" : "overpassQL"
  },
  "infoLink" : "infoLink",
  "status" : 1
} ]}]
     - parameter userId: (path) The id of the user to retrieve the challenges for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsChallenge]> 
     */
    open class func getSavedChallengesWithRequestBuilder(userId: Int64, apiKey: String, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsChallenge]> {
        var path = "/user/{userId}/saved"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsChallenge]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves Users Saved Tasks

     - parameter userId: (path) The id of the user to retrieve the challenges for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter challengeIds: (query) A comma separated list of challenge Ids that you want to filter the tasks by (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSavedTasks(userId: Int64, apiKey: String, challengeIds: String? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getSavedTasksWithRequestBuilder(userId: userId, apiKey: apiKey, challengeIds: challengeIds, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users Saved Tasks
     - GET /user/{userId}/savedTasks

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter userId: (path) The id of the user to retrieve the challenges for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter challengeIds: (query) A comma separated list of challenge Ids that you want to filter the tasks by (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getSavedTasksWithRequestBuilder(userId: Int64, apiKey: String, challengeIds: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        var path = "/user/{userId}/savedTasks"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "challengeIds": challengeIds, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves Users Json information

     - parameter userId: (path) The id of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder(userId: userId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users Json information
     - GET /user/{userId}

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter userId: (path) The id of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func getUserWithRequestBuilder(userId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves Users Json information

     - parameter username: (path) The OSM username of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserByOSMUsername(username: String, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        getUserByOSMUsernameWithRequestBuilder(username: username, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users Json information
     - GET /osmuser/{username}

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter username: (path) The OSM username of the user to retrieve 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func getUserByOSMUsernameWithRequestBuilder(username: String, apiKey: String) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/osmuser/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Retrieves Users notifications

     - parameter userId: (path) The id of the user to retrieve the notifications for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter sort: (query) Name of column to sort by (optional)
     - parameter order: (query) sort order (ASC or DESC) (optional)
     - parameter notificationType: (query)  (optional)
     - parameter isRead: (query)  (optional)
     - parameter fromUsername: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserNotifications(userId: Int64, apiKey: String, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, notificationType: Int? = nil, isRead: Int? = nil, fromUsername: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsUserNotification]?,_ error: Error?) -> Void)) {
        getUserNotificationsWithRequestBuilder(userId: userId, apiKey: apiKey, limit: limit, page: page, sort: sort, order: order, notificationType: notificationType, isRead: isRead, fromUsername: fromUsername).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves Users notifications
     - GET /user/{userId}/notifications

     - examples: [{contentType=application/json, example=[ {
  "targetId" : 2,
  "created" : 5,
  "isRead" : true,
  "description" : "description",
  "notificationType" : 1,
  "userId" : 6,
  "emailStatus" : 2,
  "challengeId" : 9,
  "extra" : "extra",
  "modified" : 5,
  "challengeName" : "challengeName",
  "id" : 0,
  "projectId" : 3,
  "fromUsername" : "fromUsername",
  "taskId" : 7
}, {
  "targetId" : 2,
  "created" : 5,
  "isRead" : true,
  "description" : "description",
  "notificationType" : 1,
  "userId" : 6,
  "emailStatus" : 2,
  "challengeId" : 9,
  "extra" : "extra",
  "modified" : 5,
  "challengeName" : "challengeName",
  "id" : 0,
  "projectId" : 3,
  "fromUsername" : "fromUsername",
  "taskId" : 7
} ]}]
     - parameter userId: (path) The id of the user to retrieve the notifications for 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter sort: (query) Name of column to sort by (optional)
     - parameter order: (query) sort order (ASC or DESC) (optional)
     - parameter notificationType: (query)  (optional)
     - parameter isRead: (query)  (optional)
     - parameter fromUsername: (query)  (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsUserNotification]> 
     */
    open class func getUserNotificationsWithRequestBuilder(userId: Int64, apiKey: String, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, notificationType: Int? = nil, isRead: Int? = nil, fromUsername: String? = nil) -> RequestBuilder<[OrgMaprouletteModelsUserNotification]> {
        var path = "/user/{userId}/notifications"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "sort": sort, 
                        "order": order, 
                        "notificationType": notificationType?.encodeToJSON(), 
                        "isRead": isRead?.encodeToJSON(), 
                        "fromUsername": fromUsername
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsUserNotification]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Gets a list of users managing project

     - parameter projectId: (path) The id of the project 
     - parameter osmIds: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsersManagingProject(projectId: Int64, osmIds: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteSessionUser]?,_ error: Error?) -> Void)) {
        getUsersManagingProjectWithRequestBuilder(projectId: projectId, osmIds: osmIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets a list of users managing project
     - GET /user/project/{projectId}

     - examples: [{contentType=application/json, example=[ {
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}, {
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
} ]}]
     - parameter projectId: (path) The id of the project 
     - parameter osmIds: (query)  (optional)

     - returns: RequestBuilder<[OrgMaprouletteSessionUser]> 
     */
    open class func getUsersManagingProjectWithRequestBuilder(projectId: Int64, osmIds: String? = nil) -> RequestBuilder<[OrgMaprouletteSessionUser]> {
        var path = "/user/project/{projectId}"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "osmIds": osmIds
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteSessionUser]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Mark user notifications as read

     - parameter userId: (path) The id of the user that owns the notifications 
     - parameter notificationIds: (query) One or more comma-separated ids of notifications to mark as read 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markNotificationsRead(userId: Int64, notificationIds: Object, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markNotificationsReadWithRequestBuilder(userId: userId, notificationIds: notificationIds).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Mark user notifications as read
     - PUT /user/{userId}/notifications

     - parameter userId: (path) The id of the user that owns the notifications 
     - parameter notificationIds: (query) One or more comma-separated ids of notifications to mark as read 

     - returns: RequestBuilder<Void> 
     */
    open class func markNotificationsReadWithRequestBuilder(userId: Int64, notificationIds: Object) -> RequestBuilder<Void> {
        var path = "/user/{userId}/notifications"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "notificationIds": notificationIds
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Refresh User Profile

     - parameter userId: (path) The osm id of the user to update the settings for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func refreshProfile(userId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        refreshProfileWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Refresh User Profile
     - PUT /user/{userId}/refresh

     - parameter userId: (path) The osm id of the user to update the settings for 

     - returns: RequestBuilder<Void> 
     */
    open class func refreshProfileWithRequestBuilder(userId: Int64) -> RequestBuilder<Void> {
        var path = "/user/{userId}/refresh"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a user from a project group

     - parameter userId: (path) The id of the user to remove. If using an OSM user id, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to remove the user from 
     - parameter groupType: (path) Either -1 all, 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeUserFromProject(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeUserFromProjectWithRequestBuilder(userId: userId, projectId: projectId, groupType: groupType, isOSMUserId: isOSMUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a user from a project group
     - DELETE /user/{userId}/project/{projectId}/{groupType}

     - parameter userId: (path) The id of the user to remove. If using an OSM user id, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to remove the user from 
     - parameter groupType: (path) Either -1 all, 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func removeUserFromProjectWithRequestBuilder(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/user/{userId}/project/{projectId}/{groupType}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let groupTypePreEscape = "\(groupType)"
        let groupTypePostEscape = groupTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupType}", with: groupTypePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isOSMUserId": isOSMUserId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Removes a list of users from a project group

     - parameter body: (body) A JSON array of user ids. This can be either the MapRoulette or OSM Id. If using OSM user ids, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to remove the users from 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeUsersFromProject(body: [Int], projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        removeUsersFromProjectWithRequestBuilder(body: body, projectId: projectId, groupType: groupType, isOSMUserId: isOSMUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Removes a list of users from a project group
     - DELETE /user/project/{projectId}/{groupType}

     - parameter body: (body) A JSON array of user ids. This can be either the MapRoulette or OSM Id. If using OSM user ids, then the isOSMUserId query parameter must be set to true 
     - parameter projectId: (path) The id of the project to remove the users from 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user ids are to be treated as OSM user ids (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func removeUsersFromProjectWithRequestBuilder(body: [Int], projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/user/project/{projectId}/{groupType}"
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let groupTypePreEscape = "\(groupType)"
        let groupTypePostEscape = groupTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupType}", with: groupTypePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isOSMUserId": isOSMUserId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Saves Challenge for a User

     - parameter userId: (path) The id of the user to save the challenges for 
     - parameter challengeId: (path) The id of the challenge to save 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveChallenge(userId: Int64, challengeId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        saveChallengeWithRequestBuilder(userId: userId, challengeId: challengeId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Saves Challenge for a User
     - POST /user/{userId}/save/{challengeId}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter userId: (path) The id of the user to save the challenges for 
     - parameter challengeId: (path) The id of the challenge to save 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func saveChallengeWithRequestBuilder(userId: Int64, challengeId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/user/{userId}/save/{challengeId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let challengeIdPreEscape = "\(challengeId)"
        let challengeIdPostEscape = challengeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{challengeId}", with: challengeIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Saves a Task for a User

     - parameter userId: (path) The id of the user to save the tasks for 
     - parameter taskId: (path) The id of the Task to save 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveTask(userId: Int64, taskId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        saveTaskWithRequestBuilder(userId: userId, taskId: taskId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Saves a Task for a User
     - POST /user/{userId}/saveTask/{taskId}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter userId: (path) The id of the user to save the tasks for 
     - parameter taskId: (path) The id of the Task to save 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func saveTaskWithRequestBuilder(userId: Int64, taskId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/user/{userId}/saveTask/{taskId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let taskIdPreEscape = "\(taskId)"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{taskId}", with: taskIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Search for users by OSM username

     - parameter username: (path) The OSM username or username fragment to search 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func searchUserByOSMUsername(username: String, apiKey: String, limit: Int? = nil, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        searchUserByOSMUsernameWithRequestBuilder(username: username, apiKey: apiKey, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search for users by OSM username
     - GET /users/find/{username}

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter username: (path) The OSM username or username fragment to search 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func searchUserByOSMUsernameWithRequestBuilder(username: String, apiKey: String, limit: Int? = nil) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/users/find/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Set project group for user, removing any prior groups

     - parameter userId: (path) The id of the user to add 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user id is to be treated as an OSM user id (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setUserProjectGroup(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        setUserProjectGroupWithRequestBuilder(userId: userId, projectId: projectId, groupType: groupType, isOSMUserId: isOSMUserId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Set project group for user, removing any prior groups
     - PUT /user/{userId}/project/{projectId}/{groupType}

     - parameter userId: (path) The id of the user to add 
     - parameter projectId: (path) The id of the project to add the user too 
     - parameter groupType: (path) Either 1 - Admin, 2 - Write, 3 - Read 
     - parameter isOSMUserId: (query) Specify if the user id is to be treated as an OSM user id (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func setUserProjectGroupWithRequestBuilder(userId: Int64, projectId: Int64, groupType: Int, isOSMUserId: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/user/{userId}/project/{projectId}/{groupType}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let projectIdPreEscape = "\(projectId)"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{projectId}", with: projectIdPostEscape, options: .literal, range: nil)
        let groupTypePreEscape = "\(groupType)"
        let groupTypePostEscape = groupTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupType}", with: groupTypePostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "isOSMUserId": isOSMUserId
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unsaves Challenge for a User

     - parameter userId: (path) The id of the user to unsave the challenges for 
     - parameter challengeId: (path) The id of the challenge to unsave 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsaveChallenge(userId: Int64, challengeId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        unsaveChallengeWithRequestBuilder(userId: userId, challengeId: challengeId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unsaves Challenge for a User
     - DELETE /user/{userId}/unsave/{challengeId}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter userId: (path) The id of the user to unsave the challenges for 
     - parameter challengeId: (path) The id of the challenge to unsave 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func unsaveChallengeWithRequestBuilder(userId: Int64, challengeId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/user/{userId}/unsave/{challengeId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let challengeIdPreEscape = "\(challengeId)"
        let challengeIdPostEscape = challengeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{challengeId}", with: challengeIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Unsaves Task for a User

     - parameter userId: (path) The id of the user to unsave the tasks for 
     - parameter taskId: (path) The id of the task to unsave 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsaveTask(userId: Int64, taskId: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        unsaveTaskWithRequestBuilder(userId: userId, taskId: taskId, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unsaves Task for a User
     - DELETE /user/{userId}/unsaveTask/{taskId}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter userId: (path) The id of the user to unsave the tasks for 
     - parameter taskId: (path) The id of the task to unsave 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func unsaveTaskWithRequestBuilder(userId: Int64, taskId: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/user/{userId}/unsaveTask/{taskId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let taskIdPreEscape = "\(taskId)"
        let taskIdPostEscape = taskIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{taskId}", with: taskIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Updates user's notification subscriptions

     - parameter body: (body) The JSON structure for the updated subscription settings 
     - parameter userId: (path) The id of the user to update the subscriptions for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotificationSubscriptions(body: OrgMaprouletteSessionUser, userId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateNotificationSubscriptionsWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Updates user's notification subscriptions
     - PUT /user/{userId}/notificationSubscriptions

     - parameter body: (body) The JSON structure for the updated subscription settings 
     - parameter userId: (path) The id of the user to update the subscriptions for 

     - returns: RequestBuilder<Void> 
     */
    open class func updateNotificationSubscriptionsWithRequestBuilder(body: OrgMaprouletteSessionUser, userId: Int64) -> RequestBuilder<Void> {
        var path = "/user/{userId}/notificationSubscriptions"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Updates UserSettings

     - parameter body: (body) The JSON structure for the users UserSettings. 
     - parameter userId: (path) The id of the user to update the settings for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(body: [OrgMaprouletteSessionUserSettings], userId: Int64, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(body: body, userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates UserSettings
     - PUT /user/{userId}

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter body: (body) The JSON structure for the users UserSettings. 
     - parameter userId: (path) The id of the user to update the settings for 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func updateUserWithRequestBuilder(body: [OrgMaprouletteSessionUserSettings], userId: Int64) -> RequestBuilder<OrgMaprouletteSessionUser> {
        var path = "/user/{userId}"
        let userIdPreEscape = "\(userId)"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Retrieves current user's JSON information

     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func whoami(apiKey: String, completion: @escaping ((_ data: OrgMaprouletteSessionUser?,_ error: Error?) -> Void)) {
        whoamiWithRequestBuilder(apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves current user's JSON information
     - GET /user/whoami

     - examples: [{contentType=application/json, example={
  "settings" : {
    "needsReview" : 2,
    "defaultBasemapId" : "defaultBasemapId",
    "leaderboardOptOut" : true,
    "isReviewer" : true,
    "emailOptIn" : true,
    "theme" : 4,
    "defaultBasemap" : 3,
    "customBasemap" : "customBasemap",
    "locale" : "locale",
    "email" : "email",
    "defaultEditor" : 9
  },
  "score" : 7,
  "apiKey" : "apiKey",
  "created" : 6,
  "modified" : 1,
  "groups" : [ {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  }, {
    "groupType" : 7,
    "created" : 9,
    "name" : "name",
    "modified" : 3,
    "id" : 5,
    "projectId" : 2
  } ],
  "guest" : true,
  "id" : 0,
  "osmProfile" : {
    "avatarURL" : "avatarURL",
    "displayName" : "displayName",
    "created" : 7,
    "homeLocation" : {
      "latitude" : 5.637376656633329,
      "name" : "name",
      "longitude" : 2.3021358869347655
    },
    "description" : "description",
    "id" : 5
  },
  "properties" : "properties"
}}]
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteSessionUser> 
     */
    open class func whoamiWithRequestBuilder(apiKey: String) -> RequestBuilder<OrgMaprouletteSessionUser> {
        let path = "/user/whoami"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteSessionUser>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
