//
// ReviewAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ReviewAPI {
    /**
     Cancels a claim on a task for review

     - parameter _id: (path) The id of the task to cancel claim on 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelTaskReview(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        cancelTaskReviewWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancels a claim on a task for review
     - GET /task/{id}/review/cancel

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the task to cancel claim on 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func cancelTaskReviewWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/review/cancel"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves tasks that need review

     - parameter reviewTasksType: (query) integer value &gt; 1 - To Be Reviewed 2 - User&#x27;s reviewed Tasks 3 - All reviewed by users 
     - parameter mappers: (query) the mapper ids to search by (review_requested_by) (optional)
     - parameter reviewers: (query) the reviewer ids to search by (reviewed_by) (optional)
     - parameter priorities: (query) the priorities to search by (optional)
     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter includeByPriority: (query) Also include a breakdown of review status by priority (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReviewMetrics(reviewTasksType: Int, mappers: String? = nil, reviewers: String? = nil, priorities: String? = nil, startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, excludeOtherReviewers: Bool? = nil, includeByPriority: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getReviewMetricsWithRequestBuilder(reviewTasksType: reviewTasksType, mappers: mappers, reviewers: reviewers, priorities: priorities, startDate: startDate, endDate: endDate, onlySaved: onlySaved, excludeOtherReviewers: excludeOtherReviewers, includeByPriority: includeByPriority).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves tasks that need review
     - GET /tasks/review/metrics

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter reviewTasksType: (query) integer value &gt; 1 - To Be Reviewed 2 - User&#x27;s reviewed Tasks 3 - All reviewed by users 
     - parameter mappers: (query) the mapper ids to search by (review_requested_by) (optional)
     - parameter reviewers: (query) the reviewer ids to search by (reviewed_by) (optional)
     - parameter priorities: (query) the priorities to search by (optional)
     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter includeByPriority: (query) Also include a breakdown of review status by priority (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getReviewMetricsWithRequestBuilder(reviewTasksType: Int, mappers: String? = nil, reviewers: String? = nil, priorities: String? = nil, startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, excludeOtherReviewers: Bool? = nil, includeByPriority: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/review/metrics"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "reviewTasksType": reviewTasksType.encodeToJSON(), 
                        "mappers": mappers, 
                        "reviewers": reviewers, 
                        "priorities": priorities, 
                        "startDate": startDate, 
                        "endDate": endDate, 
                        "onlySaved": onlySaved, 
                        "excludeOtherReviewers": excludeOtherReviewers, 
                        "includeByPriority": includeByPriority
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves tasks that need review

     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is -1 (all). (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReviewRequestedTasks(startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, excludeOtherReviewers: Bool? = nil, cs: String? = nil, o: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getReviewRequestedTasksWithRequestBuilder(startDate: startDate, endDate: endDate, onlySaved: onlySaved, limit: limit, page: page, sort: sort, order: order, excludeOtherReviewers: excludeOtherReviewers, cs: cs, o: o).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves tasks that need review
     - GET /tasks/review

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is -1 (all). (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getReviewRequestedTasksWithRequestBuilder(startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, excludeOtherReviewers: Bool? = nil, cs: String? = nil, o: String? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/review"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "startDate": startDate, 
                        "endDate": endDate, 
                        "onlySaved": onlySaved, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "sort": sort, 
                        "order": order, 
                        "excludeOtherReviewers": excludeOtherReviewers, 
                        "cs": cs, 
                        "o": o
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves reviewed tasks that have been reviewed either by this user or where the user requested the review.

     - parameter mappers: (query) The mapper ids to search by. (review_requested_by) (optional)
     - parameter reviewers: (query) Whether results should be included tasks in tasks &#x27;review requested&#x27; (optional)
     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter allowReviewNeeded: (query)  (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is -1 (all). (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)
     - parameter r: (query) The search string used to match the Reviewer names. (reviewed_by) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReviewedTasks(mappers: String? = nil, reviewers: String? = nil, startDate: String? = nil, endDate: String? = nil, allowReviewNeeded: Bool? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, cs: String? = nil, o: String? = nil, r: String? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTask]?,_ error: Error?) -> Void)) {
        getReviewedTasksWithRequestBuilder(mappers: mappers, reviewers: reviewers, startDate: startDate, endDate: endDate, allowReviewNeeded: allowReviewNeeded, limit: limit, page: page, sort: sort, order: order, cs: cs, o: o, r: r).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves reviewed tasks that have been reviewed either by this user or where the user requested the review.
     - GET /tasks/reviewed

     - examples: [{contentType=application/json, example=[ {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}, {
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
} ]}]
     - parameter mappers: (query) The mapper ids to search by. (review_requested_by) (optional)
     - parameter reviewers: (query) Whether results should be included tasks in tasks &#x27;review requested&#x27; (optional)
     - parameter startDate: (query) Whether results should be tasks that have been reviewed after this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter endDate: (query) Whether results should be tasks that have been reviewed before this date (format &#x27;YYYY-MM-DD&#x27;) (optional)
     - parameter allowReviewNeeded: (query)  (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is -1 (all). (optional)
     - parameter page: (query)  (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)
     - parameter r: (query) The search string used to match the Reviewer names. (reviewed_by) (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTask]> 
     */
    open class func getReviewedTasksWithRequestBuilder(mappers: String? = nil, reviewers: String? = nil, startDate: String? = nil, endDate: String? = nil, allowReviewNeeded: Bool? = nil, limit: Int? = nil, page: Int? = nil, sort: String? = nil, order: String? = nil, cs: String? = nil, o: String? = nil, r: String? = nil) -> RequestBuilder<[OrgMaprouletteModelsTask]> {
        let path = "/tasks/reviewed"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "mappers": mappers, 
                        "reviewers": reviewers, 
                        "startDate": startDate, 
                        "endDate": endDate, 
                        "allowReviewNeeded": allowReviewNeeded, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "sort": sort, 
                        "order": order, 
                        "cs": cs, 
                        "o": o, 
                        "r": r
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTask]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves and claims a the next review needed Task

     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter lastTaskId: (query) Fetch the next task after the lastTaskId. (so if you want to &#x27;skip&#x27; a task you can get the next one) (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)
     - parameter r: (query) The search string used to match the Reviewer names. (reviewed_by) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func nextTaskReview(onlySaved: Bool? = nil, sort: String? = nil, order: String? = nil, lastTaskId: Int64? = nil, excludeOtherReviewers: Bool? = nil, cs: String? = nil, o: String? = nil, r: String? = nil, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        nextTaskReviewWithRequestBuilder(onlySaved: onlySaved, sort: sort, order: order, lastTaskId: lastTaskId, excludeOtherReviewers: excludeOtherReviewers, cs: cs, o: o, r: r).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves and claims a the next review needed Task
     - GET /tasks/review/next

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter sort: (query) Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted. (optional)
     - parameter order: (query) Sort order direction. Either ASC or DESC. Default is \&quot;ASC\&quot; (ascending) (optional)
     - parameter lastTaskId: (query) Fetch the next task after the lastTaskId. (so if you want to &#x27;skip&#x27; a task you can get the next one) (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter cs: (query) The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges. (optional)
     - parameter o: (query) The search string used to match the name of the person requesting the review. (review_requested_by) (optional)
     - parameter r: (query) The search string used to match the Reviewer names. (reviewed_by) (optional)

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func nextTaskReviewWithRequestBuilder(onlySaved: Bool? = nil, sort: String? = nil, order: String? = nil, lastTaskId: Int64? = nil, excludeOtherReviewers: Bool? = nil, cs: String? = nil, o: String? = nil, r: String? = nil) -> RequestBuilder<OrgMaprouletteModelsTask> {
        let path = "/tasks/review/next"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "onlySaved": onlySaved, 
                        "sort": sort, 
                        "order": order, 
                        "lastTaskId": lastTaskId?.encodeToJSON(), 
                        "excludeOtherReviewers": excludeOtherReviewers, 
                        "cs": cs, 
                        "o": o, 
                        "r": r
        ])

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves and claims a review needed Task

     - parameter _id: (path) The id of the task to fetch and claim 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startTaskReview(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTask?,_ error: Error?) -> Void)) {
        startTaskReviewWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves and claims a review needed Task
     - GET /task/{id}/review/start

     - examples: [{contentType=application/json, example={
  "parent" : 5,
  "created" : 6,
  "mappedOn" : 2,
  "bundleId" : 1,
  "suggestedFix" : "suggestedFix",
  "priority" : 1,
  "isBundlePrimary" : true,
  "mapillaryImages" : [ {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  }, {
    "lon" : 7.457744773683766,
    "url_1024" : "url_1024",
    "url_640" : "url_640",
    "key" : "key",
    "lat" : 6.84685269835264,
    "url_320" : "url_320",
    "url_2048" : "url_2048"
  } ],
  "instruction" : "instruction",
  "review" : {
    "reviewRequestedBy" : 9,
    "reviewedAt" : 2,
    "reviewStartedAt" : 4,
    "reviewStatus" : 7,
    "reviewedBy" : 3,
    "reviewClaimedBy" : 7
  },
  "geometries" : "geometries",
  "name" : "name",
  "changesetId" : 1,
  "modified" : 1,
  "location" : "location",
  "completionResponses" : "completionResponses",
  "id" : 0,
  "status" : 5
}}]
     - parameter _id: (path) The id of the task to fetch and claim 

     - returns: RequestBuilder<OrgMaprouletteModelsTask> 
     */
    open class func startTaskReviewWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTask> {
        var path = "/task/{id}/review/start"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTask>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
