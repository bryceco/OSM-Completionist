//
// TagDeprecatedAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TagDeprecatedAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /tags
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/tags"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPut(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /tags
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/tags"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /tag
     - 


     - returns: RequestBuilder<Void> 
     */
    open class func createWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/tag"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter immediate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, immediate: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, immediate: immediate).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /tag/{id}
     - 

     - parameter _id: (path)  
     - parameter immediate: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, immediate: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/tag/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _prefix: (query)  (optional)
     - parameter tagType: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTags(_prefix: String? = nil, tagType: String? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTagsWithRequestBuilder(_prefix: _prefix, tagType: tagType, limit: limit, page: page).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /tags
     - 

     - parameter _prefix: (query)  (optional)
     - parameter tagType: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter page: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func getTagsWithRequestBuilder(_prefix: String? = nil, tagType: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<Void> {
        let path = "/tags"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "prefix": _prefix, 
                        "tagType": tagType, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /tag/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/tag/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /tag/{id}
     - 

     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/tag/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
