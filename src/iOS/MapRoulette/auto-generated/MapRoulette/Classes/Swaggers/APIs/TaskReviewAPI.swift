//
// TaskReviewAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class TaskReviewAPI {
    /**
     Retrieves task review clusters

     - parameter reviewTasksType: (query) integer value &gt; 1 - To Be Reviewed 2 - User&#x27;s reviewed Tasks 3 - All reviewed by users 
     - parameter points: (query) The number of clusters that you want returned (optional)
     - parameter startDate: (query) The start date to search within (optional)
     - parameter endDate: (query) The end date to search within (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReviewTaskClusters(reviewTasksType: Int, points: Int? = nil, startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, excludeOtherReviewers: Bool? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTaskCluster]?,_ error: Error?) -> Void)) {
        getReviewTaskClustersWithRequestBuilder(reviewTasksType: reviewTasksType, points: points, startDate: startDate, endDate: endDate, onlySaved: onlySaved, excludeOtherReviewers: excludeOtherReviewers).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves task review clusters
     - GET /taskCluster/review

     - examples: [{contentType=application/json, example=[ {
  "challengeIds" : [ 2, 2 ],
  "geometries" : "geometries",
  "numberOfPoints" : 6,
  "taskPriority" : 5,
  "clusterId" : 0,
  "taskId" : 1,
  "taskStatus" : 5,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "bounding" : "bounding"
}, {
  "challengeIds" : [ 2, 2 ],
  "geometries" : "geometries",
  "numberOfPoints" : 6,
  "taskPriority" : 5,
  "clusterId" : 0,
  "taskId" : 1,
  "taskStatus" : 5,
  "point" : {
    "lng" : 5.637376656633329,
    "lat" : 5.962133916683182
  },
  "bounding" : "bounding"
} ]}]
     - parameter reviewTasksType: (query) integer value &gt; 1 - To Be Reviewed 2 - User&#x27;s reviewed Tasks 3 - All reviewed by users 
     - parameter points: (query) The number of clusters that you want returned (optional)
     - parameter startDate: (query) The start date to search within (optional)
     - parameter endDate: (query) The end date to search within (optional)
     - parameter onlySaved: (query) Only show challenges that have been saved. (optional)
     - parameter excludeOtherReviewers: (query) exclude tasks that have been reviewed by someone else (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTaskCluster]> 
     */
    open class func getReviewTaskClustersWithRequestBuilder(reviewTasksType: Int, points: Int? = nil, startDate: String? = nil, endDate: String? = nil, onlySaved: Bool? = nil, excludeOtherReviewers: Bool? = nil) -> RequestBuilder<[OrgMaprouletteModelsTaskCluster]> {
        let path = "/taskCluster/review"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "reviewTasksType": reviewTasksType.encodeToJSON(), 
                        "points": points?.encodeToJSON(), 
                        "startDate": startDate, 
                        "endDate": endDate, 
                        "onlySaved": onlySaved, 
                        "excludeOtherReviewers": excludeOtherReviewers
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTaskCluster]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
