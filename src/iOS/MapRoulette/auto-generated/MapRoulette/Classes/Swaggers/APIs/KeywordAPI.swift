//
// KeywordAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class KeywordAPI {
    /**
     Create a batch of Keywords

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPost(body: [OrgMaprouletteModelsTag], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPostWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create a batch of Keywords
     - POST /keywords

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPostWithRequestBuilder(body: [OrgMaprouletteModelsTag], apiKey: String) -> RequestBuilder<Void> {
        let path = "/keywords"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update a batch of Keywords

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func batchUploadPut(body: [OrgMaprouletteModelsTag], apiKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        batchUploadPutWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Update a batch of Keywords
     - PUT /keywords

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<Void> 
     */
    open class func batchUploadPutWithRequestBuilder(body: [OrgMaprouletteModelsTag], apiKey: String) -> RequestBuilder<Void> {
        let path = "/keywords"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = MapRouletteAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create a Keyword

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create(body: OrgMaprouletteModelsTag, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsTag?,_ error: Error?) -> Void)) {
        createWithRequestBuilder(body: body, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a Keyword
     - POST /keyword

     - examples: [{contentType=application/json, example={
  "created" : "created",
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : "modified",
  "id" : 0
}}]
     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsTag> 
     */
    open class func createWithRequestBuilder(body: OrgMaprouletteModelsTag, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsTag> {
        let path = "/keyword"
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTag>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deletes an existing Keyword

     - parameter _id: (path) The id of the Keyword being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func delete(_id: Int64, apiKey: String, immediate: Bool? = nil, completion: @escaping ((_ data: OrgMaprouletteExceptionStatusMessage?,_ error: Error?) -> Void)) {
        deleteWithRequestBuilder(_id: _id, apiKey: apiKey, immediate: immediate).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Deletes an existing Keyword
     - DELETE /keyword/{id}

     - examples: [{contentType=application/json, example={
  "message" : "message",
  "status" : "status"
}}]
     - parameter _id: (path) The id of the Keyword being deleted 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter immediate: (query)  (optional)

     - returns: RequestBuilder<OrgMaprouletteExceptionStatusMessage> 
     */
    open class func deleteWithRequestBuilder(_id: Int64, apiKey: String, immediate: Bool? = nil) -> RequestBuilder<OrgMaprouletteExceptionStatusMessage> {
        var path = "/keyword/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "immediate": immediate
        ])
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteExceptionStatusMessage>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Finds Keywords

     - parameter _prefix: (query) The prefix for the Keywords you are looking for (optional)
     - parameter tagType: (query) Optional limit tags to a specific tagType (&#x27;challenges&#x27; or &#x27;tasks&#x27;) (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTags(_prefix: String? = nil, tagType: String? = nil, limit: Int? = nil, page: Int? = nil, completion: @escaping ((_ data: [OrgMaprouletteModelsTag]?,_ error: Error?) -> Void)) {
        getTagsWithRequestBuilder(_prefix: _prefix, tagType: tagType, limit: limit, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Finds Keywords
     - GET /keywords

     - examples: [{contentType=application/json, example=[ {
  "created" : "created",
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : "modified",
  "id" : 0
}, {
  "created" : "created",
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : "modified",
  "id" : 0
} ]}]
     - parameter _prefix: (query) The prefix for the Keywords you are looking for (optional)
     - parameter tagType: (query) Optional limit tags to a specific tagType (&#x27;challenges&#x27; or &#x27;tasks&#x27;) (optional)
     - parameter limit: (query) Limit the number of results returned in the response. Default value is 10. (optional)
     - parameter page: (query) Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page. (optional)

     - returns: RequestBuilder<[OrgMaprouletteModelsTag]> 
     */
    open class func getTagsWithRequestBuilder(_prefix: String? = nil, tagType: String? = nil, limit: Int? = nil, page: Int? = nil) -> RequestBuilder<[OrgMaprouletteModelsTag]> {
        let path = "/keywords"
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "prefix": _prefix, 
                        "tagType": tagType, 
                        "limit": limit?.encodeToJSON(), 
                        "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[OrgMaprouletteModelsTag]>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieves an already existing Keyword

     - parameter _id: (path) The id of the Keyword to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func read(_id: Int64, completion: @escaping ((_ data: OrgMaprouletteModelsTag?,_ error: Error?) -> Void)) {
        readWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieves an already existing Keyword
     - GET /keyword/{id}

     - examples: [{contentType=application/json, example={
  "created" : "created",
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : "modified",
  "id" : 0
}}]
     - parameter _id: (path) The id of the Keyword to retrieve 

     - returns: RequestBuilder<OrgMaprouletteModelsTag> 
     */
    open class func readWithRequestBuilder(_id: Int64) -> RequestBuilder<OrgMaprouletteModelsTag> {
        var path = "/keyword/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTag>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates a Keyword

     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter _id: (path) The ID of the Keyword that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(body: OrgMaprouletteModelsTag, _id: Int64, apiKey: String, completion: @escaping ((_ data: OrgMaprouletteModelsTag?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(body: body, _id: _id, apiKey: apiKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Updates a Keyword
     - PUT /keyword/{id}

     - examples: [{contentType=application/json, example={
  "created" : "created",
  "name" : "name",
  "tagType" : "tagType",
  "description" : "description",
  "modified" : "modified",
  "id" : 0
}}]
     - parameter body: (body) The JSON structure for the Keyword body. 
     - parameter _id: (path) The ID of the Keyword that is being updated 
     - parameter apiKey: (header) The user&#x27;s apiKey to authorize the request 

     - returns: RequestBuilder<OrgMaprouletteModelsTag> 
     */
    open class func updateWithRequestBuilder(body: OrgMaprouletteModelsTag, _id: Int64, apiKey: String) -> RequestBuilder<OrgMaprouletteModelsTag> {
        var path = "/keyword/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = MapRouletteAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "apiKey": apiKey
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<OrgMaprouletteModelsTag>.Type = MapRouletteAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
